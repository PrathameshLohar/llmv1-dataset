I've put together a collection of mybest iOS Developer interview questionvideos here's a list of what we'll coverand they are time stamped in case youwant to jump around now of course Ican't cover every topic you couldpossibly get asked about in an interviewbut these are very common topics thatare asked about all the time all rightlet's get startedthe vast majority of iOS apps have somesort of networking component to themdata lives on a server and the IOS appneeds to go to that server download thedata and display that data nicely to theuser on the device today's video breaksdown the basics of how that works wetalk about what is Json and how to useit and then we write a network calledencode using async await and Swift andthis process is a foundational skill forany iOS Developer and will almostcertainly be asked about during an iOSDeveloper interview before we dive in Iwant to say that Learning Network callsis very tricky it took me a long time tofully grasp them and it took me writinga ton of different network calls tofully understand them this video ismeant for the beginner to give you thefoundational skills on a simple examplebut I want to encourage you that heyyou're not going to be a network callPro after this video or any singularvideo on the internet it is going totake you time and repetition to learnthis so I want to let you know thatbefore we dive in this is meant to beone of your first steps on this journeyof Learning Network calls okay so weneed to download data from a server andmake it look pretty on the device whenworking with data from a rest API thatdata will be formatted in what's calledJson short for JavaScript objectnotation here's a basic example of auser object in Json you can see it'sencapsulated by curly braces it has keyvalue pairs in this example we have ausername a bio and an avatar URL that'sa super simple example let's look at areal life version of this in the GitHubAPI documentationso I'm going to get a user section ofthe GitHub documentation over on theleft here you can see all the differentareas you can go into so I see I'm inuser uh get a users what I want to be innow so this is documentation it'll tellyou what's in the API over here on theright you see this default response nowbecause I have my screen blown up it's asuper little window but you can seeright here's this curly braces there's alogin there's an avatar URL down hereyou'll see a bio now this is just anexample of you know the response what Ilike to do is take this URL here in thecurl copy it and then if you open upyour terminal you can type in curl andthen paste that URL now you see it'sapi.github.com users and then usernamethis is like the placeholder so let'sdelete username and I'll type in myusernames-a-l-o-e-n0400 you can type in yourGitHub username hit return and thisreturns real data from the API so youcan see here's my login see here's mybio iOS Developer specializing in Swiftyou can see you know follower count sothis is what I really example of Jsonwould look like and again you can seeit's encapsulated by the curly bracesyou can see the key value pairs rightthe key is login the value is sln0400and this is an example where I just getone object back it's very common thatyou're going to need a list of objectsso I'm going to down here in the nextprompt here curl same thing except nowI'm going to do slash followers and Iknow this from the API I just want toshow you if I hit return this is goingto be a list of my followers now so Iwant to show you this we'll scroll backup to the top here's where I typed itnow the reason I want to point this outis because this is another commonexample of Json you see this brackethere it probably looks familiar from anarray so here we get back an array of myfollowers right there's the login theAvatar URL and then you see it separatedby comma here's another follower here'sanother follower so I want to point thisout because yes the Json could return asingle object or could return a list ofobjects I mean you can do a lot more butthese are two very common examples thatthat I want to introduce you to forworking with Json and a quick note aboutthe GitHub API this is an example of anopen API some apis require you knowauthentication where you have to have alogin and a username some apis requirean API key because this video is meantfor the absolute beginner right writingyour very first Network call learningthis tough subject I wanted to keep itas simple as possible just know thatNetwork calls are very deep subjectwe're just scratching the surface anddealing with API keys and oauth that'san adventure for another time we'resticking with the absolute Basics okayso now you know the data is formatted inJson you've seen real examples of it solet's get back to the task at hand andthat is we need to download this Jsonsomehow convert this Json into models inour Swift Code base and then use thoseSwift models to build our UI to show thefinal result to the user when I'mbuilding this I like to break this downinto Steps step one is to build out theUI with dummy data and this helps mevisualize you know what I'm working withstep two is to look at the Json respondfonts that you see here and use it tocreate the models in our Swift Code baseand then step three is to actually writeout the networking code and then stepfour is to use that networking code andconnect the UI with the final resultokay step one build out the UI withdummy data here I am in xcode I alreadyhave this built out but as you can seesuper basic Swift UI code I wanted tosave some time here and this step goeshand in hand with designing the featureof course if you're designing your ownapp right if you're working for acompany they have their own server theyhave a designer giving you a spec that'sdifferent you build what they give youbut if you're designing your own appthis is the step where I look at theJson and I say okay this is the data Ihave to work with right I have an avatarURL I have a bio right I have the theTwitter URL I can only build my GitHubprofile screen to include what data Iget back right and this is what happenswhen you're working with someone else'sAPI whether it's GitHub YouTube Twitteryou're limited by what they give you sothat's why in this step look at the Jsonbuild out your fee feature and again Ilike to build out my dummy UI tovisualize what I'm working with and inour simple GitHub profile user pagewe're just going to have the profilepicture their username and their bio nowthat we have the basic UI sorted I moveon to step two and that is creating themodels that I'm going to use from theJson so here next code let's do that I'mgoing to create all this in one file bythe way I'll talk about that in a secondbut let's create a struct called git Hubuser so this is the object for the userthat we're going to use now whatproperties do we need again looking atthe UI we need the profile picture theusername and the bio now pulling up theJson you can see the username is calledlogin I have the Avatar URL and I havethe bio so that's what I want to workwith now back in the day a swiftdevelopers used to have to parse theJson manually and it was a major painI'm not even going to get into thatnowadays we have a nice protocol calledcodable so I'm going to make GitHub userconform to codable you can see here andreal quick actually you see thedocumentation right therebull down down here says codable isdecodable and encodable this justcombines both of them but the use caseswhen you're decoding something that iswhen you're downloading the data fromthe server you have to decode that Jsoninto your models and codable is whenyou're uploading something say you'recreating a tweet we have to encode thattweet on the app into Json and send itup to the server so we're just going todo codable technically since we're justpulling we could just do decodable butwe're going to keep it as codable forboth of them now when working withcodable your property names need tomatch the Json exactly now there's amore advanced caveat you know if youwant your property names to say whateveryou want you can use coding Keys that'sout of the scope of this beginner courseyou know if you just make your propertynames exactly match your Json that iswhat you're going to do 90 of the timeso we'll say let log in and that is oftype string and then going back ourAvatar URL you can see is let Avatarunderscore URL and then bio is just bioso let bio of string now I'm going tocontradict myself a little bit becausehere's our GitHub user and we arematching our Json exactly so this willwork but in Swift right look at ourAvatar URL that's snake case we don'ttypically write our property names usingsnake case it's not how we do things inSwift right we use camo case so insteadof Avatar underscore URL we're going todo Avatar Capital URL and when we writeour Network call we can create ourdecoder and there's a property calledconvert from snake case on our decoderthat we're going to use that's just asneak preview we'll come back to that sothat's one potential gotcha when you'rematching your Json exactly and againthis is just because that Swiftconvention to use camel case now we haveour model object ready to go okay solet's write this network call and I'mgoing to do this right on our view herein our Swift UI View and this is purelyfor educational reasons and yourunderstandings I remember when I waslearning it was very helpful for me tosee everything all in one place rightnow in a real project you know you'drefactor your network calls into a viewmodel or an API service network manageryour GitHub user object would be inanother file but again when I waslearning having everything in all thosedifferent places it was difficult for meto make the connections in my head toknow what was what so to be clear I amspelling everything out on this screento keep everything in one place sohopefully you can make those connectionsyou know this video is not aboutrefactoring and project organization butjust knowing a real project you wouldorganize it and refactor it but againkeeping everything in one place for theease of your understanding okay so thefunction here on The View we're gonnasay func git user and we're going tomark that async because we are usingasync away and we're going to Marketthrows because we want to throw errorsnow you don't have to mark this throwsbut when working with network callsthere's so many things that can go wrongright they may not be connected to theinternet uh maybe you know you have thewrong URL or the server is down right somany things can go wrong with a networkcall so you pretty much always are goingto have it throws here and we want toreturn a GitHub user that's the objectafter we make our Network call thatwe're going to return from this functionso open curly brace close curly bracenow the first thing we need is the URLthat we're going to point to to get thedata from if we go back to the GitHubAPI here right get a user that's whatwe're working with and then here you cansee the URL this api.github.com usersusername so I'm going to copy this backto xcode we're going to say let endpointequal and it's going to be a stringpaste this here now we don't want thisdummy username right you can put in yourname I'm going to put in my name or putin whatever name you want of a GitHubuser now in real app maybe the user youknow can type this in and then yousearch based on that but again we'rejust hard coding to demonstrate how thenetwork call works so now that I have myendpoint we're going to use what'scalled URL session which in Swift isbasically how you make Network calls letme type out the code and then I'llexplain it so I'm going to say let datacomma response equal try oh wait andagain this is uh Swift concurrency asyncawait URL session Dot shared dot datafrom URL this is an example of a getrequest so there's four main types ofrequests you can make with network callsthere's the get which means you are justpulling down data read only there's postwhich means you are posting data to theserver you're sending things up to theserver right get would be downloadingpost would be uploading right if youcreated a tweet and uploaded it toTwitter and then there's the put whichmeans you're editing something and thenthere's delete which obviously you wouldbe deleting something those are the fourmain basic types of requests again we'redoing a get because we're justdownloading and pulling the data so fromURL but you can see I need a URL objectand if I go back to just typing in thedata so we can see that quick littledocumentation data from you can see Iget back data in a URL response sothat's why here I say here's data andresponse so what the data is it's goingto be the data you know the Json theresponse is response codes we'll getback to that in a second so data fromURL so now I need a URL object thislooks like a URL but this is a string soin Swift We have a URL object that weneed to convert this string to and whenwe initialize URL object it returns anoptional so we need to do someunwrapping here guard let URL equalhere's our URL string right we'reinitializing a URL from a string thestring we're going to pass in is thatendpoint that we just had up here sowe're going to pass in this string toour URL initializer and it's going toreturn a URL object which we're going touse in our URL session but it can returnan optional so all I'm doing here ishandling the error we'll say Throw errorwe'll come back to that in one second Ijust want to finish this placeholder sothe URL that we're going to pass in isthe URL that we just created right hereon line 32. let's talk about theseerrors real quick right we're throwingthis error isn't going to work we cancreate our custom error objects tohandle each error specifically and thisis a common practice with network callsso again I'm just doing this all in onefile maybe you'd have a separate errorfile but we'll say enum GH for GitHuberror I'm just putting the GH in frontof it to name it something you can nameit whatever you want I just can't benormal error because that already existsin Swift and our custom error needs toconform to the error protocol so I cansay case we'll say this is invalid URLso if the URL fails I'm going to throwthe error called GH error.invalid URLI'm going to put this on a new line forstructural purposes so again we'recreating a URL if that URL can't becreated we throw the error invalid URLand then if we have a good URL we'regoing to call URL session share.datafrom that URL and that is going toreturn data in a response so now we needto work with the data in the response sofirst we want to check the responsebecause what the response is if you'refamiliar right 404 not found you know500 server error or 200 everything wentgreat these are all the HTTP responsecodes on the internet and this this isyour opportunity to handle thoseaccordingly so let's do that we'll sayguard let response equal response as I'mgoing to cast this as an HTTP URLresponse so I can get the codes here andthen get the response dot status codeagain this is that 404 not found or 500server error so I want to just make sureit equals 200. 200 means everything isA-Okay we're good to go else and I wantto throw but I don't have the air yet soagain down here in GH air we'll say caseinvalid response and then I will throwGH air dot invalid response now againthis is the opportunity I'm onlychecking for 200 if we have 200 greatwe're good to go if not throw a genericinvalid response error this would beyour opportunity if you did get a 404not found or 500 to show very specificerrors to that code again for your appand when dealing with network calls it'svery important to be specific about yourerrors right have you ever used an appand it just says on unable to completethe task and you have no idea what'swrong this is your chance to tell theuser exactly what is wrong which is whatyou want to do and for the sake of timeI'm just giving you a couple examples topoint you in the right direction so nowthat we have a good 200 status code thatmeans everything was A-Okay now we wantto work with our data to convert theJson into our GitHub user object so todo that we want to do a do we want tocreate our decoder so let decoder equalJson decoder right this is how we'regoing to decode this Json and then thisis what I talked about earlier we wantdecoder dot key decoding strategy equalsdot convert from snake case so pullingup the Json remember Avatar URL had thatunderscore space URL well again in Swiftwe use camel case not snake case soluckily Swift has a built-in it'llconvert it for you so that's why if I goback to my user I can have Avatar URL incamel case because what convert fromsnake case does it deletes theunderscore and capitalizes the firstletter that's what convert from snakecase does so again this is the gotchawhere you may not want to match the Jsonexactly now you could match the Jsonexactly and keep it snake case have theunderscore your Swift Code will justlook weird and other Swift developerswill be like what's this snake casestuff here so that's why I want to useconvert from snake case but again ifit's one word or it's already in camelcase you want your property names inyour object to match the Json exactlyagain with the exception of you knowconverting from snake case okay finallylet's return try decoder dot decode andthen we want to pass in a type and thenfrom data so when we're decoding we haveto tell it what type we're decoding intoso we're going to say GitHubuser.self that declares the type fromthe data well that's the data we gotback here from our URL session up herein line 36 so we're going to type indata and then a do try you know requiresa catch this error handling and then ifthis fails we will throw again we needanother error we're going to createanother error here called case invalidgood data and then up here what we'regoing to throw we're going to throw GHair dot invalid data and again all I'mdoing is giving you an example of howyou can really customize your errors andlet the user know exactly what is goingwrong if something goes wrong if you getthis invalid data 90 of the time thereason this will fail to decode rightbecause what this line of code does hereis it is trying to use our decoder hereusing codable to decode the data we gotback which again is this Json you seehere into a GitHub user object in Swiftthat's what this whole section is doingnow it will fail again ninety percent ofthe time there's many other reasons itcan fail because you didn't match yourproperty names correctly so our Networkcall is written let me run through itagain as a refresher right so we'recalling git user we marked it async sowe can use async await we also marked itthrows because we want to throw a fewerrors because again so many things cango wrong in a network call and we'rereturning a GitHub user and we need toknow what endpoint to pass it to rightright so this is the user's endpoint andagain where I got that from was theGitHub rest API documentation I want toget a user like you see here on the leftand you can see the URL for that that Ialready have highlighted is right hereso the documentation will let you knowwhat URL you want to point to so back toxcode cool I need to create a URL objectfrom this string that's what we're doinghere as long as that's good then I usemy URL session to get data from the URLagain this is an example of a getrequest but we're just downloading rightwe're not uploading anything we're notediting anything we're just downloadingthe data and I need to pass a URL that Icreated up here on line 32. now thisreturns a tuple of data and response soagain the response is what we talk aboutfirst this is all the you know 404 notfound 500. we want to check to make surewe have a 200 so we're doing here thatmeans everything is good to go cool soif we don't get to 200 we're going tothrow the invalid response error show itto the user you know handle it if thisis good we go to 200 back now we canwork with our data here so that's whatwe're doing here in this do try catch wecreate a Json decoder and the reason Icreated it was so I could set the key tocoding strategy and because I want toconvert from snake case right that'sthis Avatar URL issue we had here if Ididn't have that issue with snake caseon Avatar URL I would not need this lineof code right here okay and then like Isaid we try to use that decoder todecode the Json into a GitHub user andfrom that data again that's the Json wegot back if that works we're good to gowe're going to return a GitHub user thefunction worked properly if we fail todecode we're going to throw the invaliddata error okay so that is our Networkcalled written now for step four is toactually use this network call andconnect it to our UI to show the finalresults okay so I'm going to scroll uphere to our Swift UI view remember thisis normally refactored this get userthis is probably in a view modelsomewhere so it's not as messy but againkeeping it all in one place so up to ourview here so in order to call this Iwant to below the padding here we'll doa DOT task now a DOT task is used for asyou can see at the bottom here adds anasynchronous task to perform before theview appears it's kind of like on appearif you're familiar with swift UI butit's ready to go for asynchronous codefor example that our async await Networkcall so that's what I want to do here Iwant to call this but I need to set auser equal to what we return right we'rereturning a GitHub user object but Idon't have the concept of that in myview so we can do that real quick atState private VAR we'll say user andthen it's up type GitHub user and thatis optional because when the view firstloads we don't have that right we don'thave it until we make our Network callso in order to call our async Networkcall here I want to do do we'll say userequals try await get user So This Is Uscalling our Network call right here sowhen the view appears I need to have acatch here let's just put that in therefor now we're going to handle the errorsin a second but yeah so I am setting theuser that I created here and this is astate variable which means in Swift UIonce my network call is completed and Iset this user to the user I get backthen the UI will update which we'll getto in a second so I'm setting userequals to the result of my network callwhich again we went through that I'mdoing all that Parts in the Json settingthe user cool so if it is successfulgreat I set the user to the user I getback my UI updates we got to write thecode for that in a second but if it'snot successful here's where I can handlethe various errors so I would do catchGH error dot invalid URL and then Iwould print you know in valid URL catchGH air dot invalid response andobviously you wouldn't just print thisyou would show like a pop-up or dowhatever you need to do in your app youknow to let the user know what's goingon and then finally catch GHerror.invalid data print and again Iknow this looks long and tedious but heyif you're going to do proper errorhandling and showing the user exactlywhat's going on it is long and tedious Icould just have one error be generic andyou're unable to complete the task atthis time please try again later that'snot helpful to the user so you could belazy and not do all this that's not verygood and then we'll do our final catchwhich is kind of like the catch-allwe'll say unexpected error do command Bshould work okay so like I said this isjust an example of uh handling uh veryspecific errors okay so now that I havemy user the final step is to update theUI to take in the actual user data sofor example username is not just textusername right it would be user DotLogin and that is an optional so we wantto provide a default thanks we'll saylogin placeholder of course if you'rebuilding a real UI you'd want to makethis look nice some placeholder now forthe bio againuser.bio and if that is nil we'll saybio placeholder whatever that is for youand then now we need to handle ourAvatar URL which for that we're going todo async image which is nice for SwiftUI we don't have to make a separateNetwork call switch your eyes this asyncimage already built in it does take aURL so we'll say URL from string andthat will be the user dot Avatar URL andif that is now if our users know insteadof passing in the Avatar URL or passinga blank string which will give us aplaceholder that's what this placeholderis right here and we'll use our Circlehere as the placeholder that means whileit's loading or if the URL comes backnil then it'll just show that grayCircle again if you're designing your UImake the placeholder nice looking let meactually take out this frame and put iton the async image itself so I can reusethat okay so now I get back an image sothere's just a normal Swift UI imagewhich means I can do things like dotresizable dot aspect ratio dot fit andfinally dot clip shape of a circlebecause I want it to be rounded okay soto recap basically I created the asyncimage which will pull the user's AvatarURL create an async image from that ifthat doesn't work we'll show the circleplaceholder and then the text I'm usingfor the login will be the user's loginif that's nil show the login placeholdersame thing with the bio so now when Irun my preview let's refresh it itshould make the network call there yougo sl0400 there's my profile picturethere's my bio let's try some otherdevelopers here so I just need to changethe username in the endpoint like I saidin a real app maybe the user could typethis in you know however you want to doin your app but let's say two straws runit back we should see Paul's stuff yepthere's Paul's profile picture hisusername his bio uh John sundowe're making our Network call it isworking and I know this video threw alot at you with writing all the networkcalls the async await throws you knowasync image definitely don't be afraidto go back and re-watch it like I saidat the beginning Network calls are verytough topic if you're just learning themit's going to take you a while you'regoing to have to watch many differentvideos you're gonna have to hear itexplained many different ways you'regonna have to write 50 of them like thisis a process and again this video wasmeant to be one of your first steps inthat processa very common iOS Developer interviewquestion is to explain the differencebetween classes and structs I'm going toteach you the answer to that question byexplaining value types and referencetypes and I've got a nice little analogyusing Google Sheets in Microsoft Excelto help you remember and then I'll teachyou when you should use classes and whenyou should use structs classes andstructs are both ways to create objectsin the Swift programming language as youcan see here I have a class called carwhich is creating an object the car hasa year make and model more realisticexamples in an app would be somethinglike a user or a product but for thesake of explaining this concept we'regoing to stick with our simple car sothe main answer to this interviewquestions on classes versus structs isthat classes are reference types andstructs are value types what does thateven mean well let's write some code toshow you an example so I have my carclass here let's create a car we'll sayVAR my car equals and I'll initializethe car you can see I need to pass in ayear make and model so say 2022 makePorsche color gray so I've created a carwith the year make and color becausethis is a class this is a reference typewhat that means is that it's a referenceor pointer to specific data so forexample if someone steals my car rightso if I do VAR stolen car equals my carright so I took this my car object andset it equal to stolen car well now Ihave two variables again it's areference they're both pointing to thesame piece of data which is this carhere so on the stolen car if someonewants to make you know my car adifferent color it's going to affect theoriginal my car let's see this here soif I do stolen car dot color equalsyellow and then if I do print my car dotcolor you notice I'm not printing stolencard.color I'm printing my card.color ifI run that you're going to see mycar.color prints out yellow and this iswhere the Google sheet analogy will helpyou remember this so the way a Googlesheet works right you share the sheetwith multiple people and then whenmultiple people make changes to that onesource of truth right they can all makechanges to that Google sheet it's ashared document that's kind of howreference types work again I change thecolor property on the variable stolencar but it also changed the property ofcolor on the variable my card that'sdemonstrated on line 18 by printing outmycard.color so again classes arereference types and if you createmultiple variables of the same classthey're all going to point to the samepiece of data and if you change thatpiece of data on any one of thosevariables again we have my car andstolen car is going to change thatproperty for all of those variables thatare all pointing to that same piece ofdata that is a reference type now let'stalk about structs and value types soI'm going to copy this class here andthen I'm going to comment it out just soyou don't lose all the code here andthen we'll paste that in here instead ofa class being a car we'll do a struct ofa car and then trucks have member-wiseinitializers that's another topic so Idon't have to have that in it and I havemy struct of a car same thing againthey're both ways to create objects inSwift but structs are value typesremember classes or reference typesstructs are value type types when avalue type gets passed around it iscopied and this is where the analogy ofthe Microsoft Excel spreadsheet comes inright if I have my own Excel spreadsheetI made all my changes to it I save it Imake a copy of it and I email that copyto you well now when you get that copythat's yours you can make all kinds ofchanges to that spreadsheet you can dowhatever you want to it it is not goingto affect my original file version sothat is the analogy for Value typeswhere again reference types was like aGoogle sheet where everyone can makechanges to the one source of Truth letme demonstrate that in code so I'll comeup here copy the my car variable whatkind of gonna do the same example butyou'll see now if I do VAR stolen carequals my car well now that it's astruck that basically just made a copyof my car and assigned it to thevariable stolen car so now if I dostolen car.color equals we'll say rednow now when I print my car dot coloragain my car was the original objectthat I created it is still going to begray right help right that's how itshould work run it great there it isright and if I did print stolencard.color now it's going to print outred because again struct is a value typeso it created a copy of my car andassigned it to stolen car we're again asa class to reference types all pointedto the same underlying data now let'stalk about when you should use a classversus a struct in the pros and cons ofboth a benefit of classes is that theyhave what's called inheritance whichmeans I can subclass or car class uphere I can create a subclass of carmaybe called race car that inherits allthe basic properties of a car right ouryear make color but I can also add moreproperties to that right I can maybe adda number right race cars have numbersand a team race cars have teams so youcan see it gets all the basic car stuffbut I can add on the unique stuff that anormal car doesn't have but a race carwould have that's called subclassing andwhen you subclass you inherit everythingin the parent class another commonexample and I'll show you somedocumentation that will help out here isif you say class my custom button andthat inherits from UI button and if Ioption click on UI button I'll go to thedocumentation so when I make my custombutton I don't want to reinvent thewheel everything Apple has done to makea button work like look at all thisstuff in the documentation that you youget customizing color Edge insets youknow setting the title I'm going to godown to the bottom here of all theproperties that are on it right settitle title color all the stuff thatApple has built in a button you inheritwhen you create your custom button andthen now you just add differences youwant to make to make your button custommaybe you want it to be a circle andalways be pink who knows but that's whatyou can do with inheritance you canbuild on top of the UI button now thatsounds like a really cool benefit but asyou can imagine when you're inheritingeverything of a UI button which alsoinherits from UI view you're starting toinherit a lot of bloat and extra baggageyou may not need so that is wherestructs come in and value types if youdon't need all that inheritance you canjust use a struct and that's why trucksare a lot more lightweight andperformant and if you've written SwiftUI you'll notice a lot of Swift UI isbuilt on structs for that exact reasonright a swift UI view is a struct so itcan be created and redestroed all thetime and it's not so heavy so when youneed an inheritance or you need areference type that's when you go for aclass when you don't need inheritanceyou want something lightweight andperformant then you go with a structgenerics can be intimidating andconfusing angle brackets single lettertypes protocol conformance what's goingon here this video teaches you whatgenerics are with a basic and real lifeexample and then we'll talk about TheBalancing Act you have to do withgenerics because once you learn themyou're going to want to use themeverywhere but you can easily addunnecessary complexity to your code solet's make sure you don't do thatgenerics can eliminate co-duplication bycreating a general solution that canhandle various types here's an abstractexample to help illustrate the pointlet's say you have a function that candrive you home from work this functionwill work no matter what the vehicle isright it doesn't care it could be amotorcycle a cyber truck a Porsche 911GT3 as long as it has a motor and wheelsthe function will work it doesn't carewhat type of vehicle it is so you havethe drive home function and then youhave the angle brackets with the T colonand drivable in the middle so this is aprotocol conformance or a constraint onthe generic so inside the angle bracketwe call the generic something right nowwe're calling get T that is conventionto use a single letter variable typicalT sometimes U sometimes V you could ifyou wanted to like name it vehicle asyou see here but again common conventionis to just use the single letter T sowe're calling our generic T and thenafter the colon we're constraining it orwe're telling it what protocols it hasto conform to so like I said ourfunction will work it doesn't care whatthe vehicle is as long as it has a motorand wheels and that is our protocoldrivable so you see drivable hererequires a motor and wheels and you seeour function takes in the parametercalled vehicle which is of type T whichagain is our generic T can be any typeas long as it conforms to drivable so aquick example you see I have a Porsche911 GT3 object and a motorcycle objectboth of them conform to drivable theyboth have motor and wheels and then youcan see I create a 911 by initializingthe Porsche GT3 and I create amotorcycle by initializing motorcycleand you can see I can use my functionhere by passing in either the 911 or themotorcycle the function function willwork it doesn't care what actual type itis as long as it conforms to drivablethat was a high level example just tointroduce you to the topic if youweren't quite following we're going todive in deeper so let's write a basicexample all from scratch to practicethis concept we'll create a functioncalled determine higher value and if wewant to make it generic that's where theangle brackets come in and like I saidwe're calling our variable t or ourgeneric T and if you just wanted to takeliterally any type no constraints thisis enough but we do want to constrainour generic and again all constrainingyour generic means is it has to conformto a certain protocol so we're going toconform to the comparable or comparablewhatever protocol so again we'll takeany type as long as it conforms tocomparable and then we're going to takein two parameters here we'll say valueone is of type T and then value twois also of type T so they have to be thesame type right I can't compare an INTand a string have to be the same typeand now we'll determine the highervalues so we'll say let higher valueequal we'll do a turn every operatorhere value one greater than value two ifthat is true value one will be thehigher value and then if not value twothere might be a better way to writethat that looks repetitive but whatevernot the point so we'll say print highervalue is the higher value and you'll seeus use this okay so again let's walkthrough the function signature we'redetermining the higher value we'resaying hey we want to take in a genericwell we're going to name that generic Tand then we're going to constrain thatgeneric it has to conform to comparableokay cool and then we take parameterswhatever parameters you want value onethat is of type T and value two is oftype T so they have to be the same typeso let's see this in action so I willsay determine higher value of you knowthree and eight and then if I run ityou'll see 8 is the higher value coolthat was an INT now let's do strings ofSean and so by the way strings arealphabetical order when you compare themso do that it'll say Swift is the highervalue because Swift comes after Seanalphabetically so again anything that'scomparable we ins floats doubles stringseven like look dates so I can do datedot now or I can do I don't want tocreate a whole date so let's do date dotdistant future right so the distantfuture date should be the higher valueso I'm going to play this and we'll seeyear four thousand and one so January1st 4001 is the higher value than rightnow okay so like I said you're passingin strings in doubles it doesn't matterthis function will work as long as itconforms the comparable now if I try tocompare a date to a string like that'snot going to work you'll see me get anerror so it does have to be the sametype again that's why we're designatingit t here but as long as they're thesame type you have this one genericpiece of code that can handle variousspecific types and generics are all overthe Swift language behind the scenes solook at something you use all the timein an array so I'm going to say letnumber array and I'm going to declare itlike this so I can dive into thedocumentation say array repeating let'ssay I want to repeat the number 3 10times and you'll see over here rightthere's my array all the threes but thereason I did this because I want to diveinto the documentation on array so if Ioption click on array open in developerdocumentation you can see right here theDeclaration array has a generic of anelement so what that means is if I havean array of ins I can still do thingslike numbers array actually I have tomake numbers array a VAR if I'm going tomanipulate it here numbers array dotappend new element and you can see itknows it's of type int right here so ifI append a 4 I can do that to thenumbers array now let's do VAR stringarray equals array again repeating herethis time we'll repeat Sean and we'lljust do it five times so now I stillhave this dot append on array right Idon't have to have a specific a penfunction for Strings and a specific apen function for INS because in ourarray is a generic of type element I cando append count first of all the stuffarrays have no matter what the type iswhether it's an INT or strings right soI can do string array dot append andwe'll say Swift right and that willstill work and then again back to thedocumentation that is because array is ageneric of type element so againgenerics all over the Swift languagebehind the scenes now let's look at areal life example from an app I builtfor my course GitHub followers the appwe pulled down a list of followers youcan tap on a follower to see theirinformation so we have a network callcalled Fetch user as you can see herenow I've removed all the air handlingand the response validation to make thissuper simple code just know that ifyou're not familiar a real Network callis much more involved than this butagain stripped it away for Simplicity ofgenerics so this is not a genericfunction right we're calling fetch userfrom URL it returns a specific type ofuser and then you can see down here inthe do try catch we're decodinguser.self so this network call is veryspecific to users however it is verycommon in an app to make a network callto fetch an object and then decode itusing codable very very common likehere's another example if we were goingto do fetch repository you can see verysimilar code fetch repository it returnsa repository type we make the networkcall we decode it using decodable orrepository.self it's the same code justswapping out user for repository soinstead of writing separate Networkcalls for for each specific type we haveright this is only an example of twowhat if we had five different types wewere doing we can make this generic asyou see in this function signature againthe angle brackets after fetch data wecall our generic T the constraint we puton the generic and again the genericconstraint is just making it conform toa protocol we want it to conform todecodable because we're fetching datafrom the server and we're decoding it weneed to pass in the type this 4T DOTtype because we need to you know let thenetwork call know which type it's goingto be and then we pass in the URL andthen you can see we're returning T whichagain is whatever type we pass in thatconforms to decodable and then you seethe code is the same right we make ourURL session share.data make the networkcall in the do try catch we're decodingit but instead of user.self or insteadof repository.self you can see it is Tdot self so we're making the T thegeneric so we can pass in a user arepository or whatever other object wehave again as long as it conforms todecodable now that you understand thebasics of generics let's talk about TheBalancing Act because once you learnthis skill you're going to want to putgenerics everywhere right every littlebit of repetitive code you're going towant to make it a generic or the dreadedtrap of oh let's future proof this incase we write more Network calls likethis spoiler alert most of the time whenyou future proof that Future Never Comesthat's called premature optimization andyou should avoid it because addinggenerics everywhere can really addunnecessary complexity to your code sohere's my advice only use generics whenit's like a slam dunk use case in myopinion even going back to our Networkcalls and GitHub followers we'refetching a user or fetching a repositorythat was only two Network calls thatwere exactly the same even if there'sonly two I wouldn't use a genericbecause concrete types are way easier toread way easier to understand what'sgoing on now like I said If instead ofjust a user or repository maybe you'refetching a project or you know fiveother things from the GitHub API and nowyou have five or six of these Networkcalls that are all the same to me slamdunk case use a generic that's awesomebut again if there's only one little bitof repetition don't automatically throwgenerics at it you're just overcomplicating things we just scratchedthe surface on generics they're a verydeep and Powerful topic but hopefullythis video gave you the fundamentalunderstanding to start you on yourjourney of learning generics and helpyou answer that pesky interview questionabout genericswhat are all these parentheses what's upwith these dollar signs escaping likewho are we running from trailing closuresyntax what does that even mean lookclosures are tough these are all thingsthat confuse the hell out of me waydeeper into my career than I'd like toadmit let's make sure you understandclosures a lot faster than I didclosures are self-contained blocks offunctionality that can be passed aroundand used in your code to put that simplythey're functions that can be passedaround to illustrate that let's create aclosure and put it to good use here I amin my xcode playground all I have is anobject of a student that has a name anda test score and then I have an array ofthose student types we're going tocreate a closure to filter out thestudents by their test score VAR topstudent filter and that is of type nowof type is the key word here to explainthis because just like our student has aname that is of type string a test scorethat is of type int our closure is avariable that is of type and this iswhere the parentheses come in it'sessentially the function signature soI'm going to type this out and we'llwalk through and explain it so you getone set of parentheses and then thereturn type is the other set ofparentheses and that equals and then theactual curly braces to define the scopeso let's walk through these parenthesesone by one because I know this confusedme greatly when I was first learningclosures so the first set of parenthesesis any parameters the function takes inhowever we don't need to name them wejust need the type so we want to take ina type of student now of course ifyou're doing something with an INT or astring that's where you would pass thisin we're dealing with our custom typehere of student so that's why we passedin that and then this is going to returna Boolean I'm going to back up andexplain this real quick because you mayhave seen you know sometimes it doesn'treturn anything so you may see emptyparentheses or sometimes if it doesn'treturn anything you can see void as wellthose empty parentheses and void are thesame thing just two different ways tosay it in our case we're going to passin a Boolean because this is a filterwe're going to look at our student andif our student has a score of greaterthan 80 we're going to return true thatmeans there are top students so that'swhy we passed in a student and returneda Boolean we just want to check if theyhave a score greater than 80. so returnstudent but we can't do this quite yetwe're missing a piece here where we needto name our parameter here student inyou've seen this before so this isbasically the parameter name so we canuse it down here in the scope of ourclosure so I can do return student DOTtest score I don't know why the audiocomplete's not cooperating but greaterthan 80. let me run it real quick justmake sure I didn't miss anything shouldbe good cool everything's good to go andactually maybe this will help let'swrite this as a function so you cancompare the two because I'm assumingyou're familiar with functions a bit soI just copied and paste that so to writea function right it's Funk top studentfilter I'm going to put an F after itfor function and then instead of havingall this right here I'm just going to goahead and delete that right you wouldsay hey this takes in a student of typestudent it returns a Boolean and here'sour scope and we would say returnstudent DOT test score greater thanwe'll say 70. so to compare the thefunction and by the way these are verysimilar you can even use the functionyou'll see we'll do that in a second butI just kind of want to put these side byside so you can see how similar it islike I said it's a property with thename of type just like you know stringand int the type here is the functionsignature right it takes in a type ofstudent and returns a bull that's what'sgoing on here type of student returns abull and then here the student is whatwe named it we can name it whatever wewant just like we can name thisparameter name anything we want and thenyou see obviously in the scope isbasically the same so hopefully thatclears up what these parentheses arewhen you see that in the closures againit's just any parameters and what itreturns just like a function parametersand what it returns so now that we'vedefined our closure up here in topstudent filler filter filter has a tthere we go but anyway now that we haveour closure we're going to pass itaround using our variable so let's dothat let's say let top students equalstudents by the way students is ourarray up here this is our array of allof our students dot filter and you cansee our filter takes in a closure andjust like we said here is the typetaking a student and it returns aBoolean so the only way we're going tobe able to pass in our closure is if itmatches that perfectly right takes in astudent and returns a Boolean let's sayour closure up here had a student and anINT right by the way they say you canhave multiple types maybe student Dashage if you had multiple types in yourclosure I guess would be multipleparameters now our closure wouldn't workbecause it doesn't match exactly so I'mgoing to delete that because I want itto work so now I can just pass in topstudent filter and now let me paste in aquick little for Loop to save some timejust basically just prints off thestudent name we'll run it and thatfilter should work yes we have Luke layand Ahsoka those scores have to begreater than 80 right Luke has an 88Leia 95 Ahsoka and 86 so our filter isworking by passing in our closure thereagain closure is a function that can bepassed around and this is a lot neaterthan if we wrote it out so let'sdemonstrate that well real quick let medemonstrate how we can also pass in thisfunction so let me do top student filterwith a capital f at the end right that'swhat this is up here and then now when Irun it were greater than 70 this is whyI did this so we can differentiate sonow when I run it I should get a longerlist of students which I do because morestudents up here are greater than 70. soagain whether it's a property or afunction very similar a closure is afunction that can be passed around andused now that you've seen that let'sstart talking about shorthand and whatall these dollar signs mean so I'm goingto rewrite this filter here or Ire-autocomplete it here so filter isincluded so as you can see this is goingto give me a closure that takes in astudent and returns a Boolean if I hitreturn I get a little bit of theshorthand and it automatically goes toTrail enclosure syntax which we'll talkabout more in a little bit but theintroduction if I do command Z Trailenclosure syntax is when you can omitthis argument label when your closure isthe last argument we'll talk a lot aboutthat in Swift UI because Swift UI usesthat heavily a little bit more in thevideo but our closure is our onlyparameter so of course it's our lastparameter so when hit return we gettrailing closure syntax which isomitting the parameter names in theparentheses and just going right intothe body of the closure like that so nowwe have our argument name and we don'thave to define the type the reason wedon't have to define the type is becauseit knows this running filter on an arrayof students right our students arrayright here has Type inference it knowsit's an array of students it's not anarray of strings not an array of doublesor anything like that it's students sothat's why we don't need to define thetype and we can just call this whateverwe want you can see the capital S forstudent means it's the student typewe're going to name it lowercase studentjust as the name again we could havenamed this person right you can name itwhatever you want student obviouslymakes the most sense but we know it's oftype student so here we can write thesame code so I'm using simple one linesof code but obviously this could havebeen 40 lines it could have been supercomplex filtering code that is why youmight not want to write it out all atonce you might want to put it away intoa property so it can be reused passedaround very easily versus right now I'mwriting it out like on site within thescope of the filter again it looks fineright now because it's just one line ofcode but I want to use this simpleexample to show you the shorthand theseparameters come with a built-inshorthand syntax you've probably seendollar sign zero or dollar sign one whatthat represents is each parameter hereso right now we only have one so it'sdollar sign zero in a second I'll showyou an example where we have dollar signzero and dollar sign one so how I canslowly make this shorthand is if I don'twant to use the actual named propertyhere get rid of that and get rid of theend and then now instead of student downhere I can replace that with dollar signzero because I only have one argumentthere is no dollar sign one it's justdollar sign zero so I know that's thestudent and now when we only have oneline of code we can omit the return andif we're going to omit the return we canput this all on one line to be nice neatand clean so that's your introduction tothe shorthand and with the dollar signzero and the dollar sign one is so rightnow we just have top students wefiltered out all the top students basedon if their test score is greater than80. now let's actually sort this so youcan see an example of dollar sign zeroand dollar sign one and just morerepetition on closures because againclosures are tough so let's say letstudent ranking equal top student so weonly want to take the top students dotsorted by and here again you can seethis is an example when we have two ofthese parameters we have student one andstudent two and it returns a Boolean soif we were to write a closure for thisone we would have to make sure we hadtwo students in it right so we'd have tobe student student and then of course wewould write different logic to do allthe Sorting here but like I said I justwant to point out that oh and we wouldalso here have to have student two but Iwanted to point out that if you aregoing to use a closure in a built-inlike sorted or filter it has to matchexactly or if you wrote a functionyourself it has to match exactlyso I'm gonna do a command Z to get ourclosure back to that and I'm gonna hitreturn and walk through that shorthandagain so like I said you could havestudent one student two and then doreturn student one dot test scoregreater than student2 DOT test score andthis will sort them based on Whose testscore is higher but again back to theshorthand we don't need Student onestudent two I know that is dollar signzero and dollar sign one so we can getrid of that to make it cleaner and thenI'll replace student one with dollarsign zero and student two with dollarsign one now if you add three or fourparameters up there it'd be a dollarsign two dollar sign three and so onlike I said before we don't need thereturn so we can put this on one lineand there you go so like I said ifyou've seen a lot of these closures withthe dollar signs and dollar sign onedollar sign two those are essentiallyshorthand Syntax for each property likewe just showed with the student andstudent one and student two I hope thatcleared up all the dollar sign Syntaxfor you I know that was confusing for meas well when I was starting out let'stalk about trailing closure syntaxbefore we get on to to escaping let's goto a swift UI project to see how this iseverywhere in Swift UI here I am in mycourse called dub dub grub by the wayyou can check this out Seanallen.teachbowl.com if you're interestedif you've ever written a v-stack or anhtac in Swift UI you've used trailerenclosure syntax and if you've written alot of Swift UI you've done that manymany times so let me explain that here Iam in just a basic little button let'ssay I wanted to put this text in av-stack so I do that v stack cool nowwhen you wrote the v-stock you just didopen curly brace closed curly brace andyou probably thought nothing of it ifyou didn't understand Trail enclosuresbut that's what it is it's a trailenclosure so let's talk about what av-stack really is so if I do v-stackhold option to get all the parametersthere right they're just optional andSwift UI is riddled with optionalparameters and default values I'll showyou that in a second but what I want topoint out to you is cool here's aparameter you can dot leading spacingwe'll say 10 but look what does it endwith it ends with content and what doesthat syntax look like to you that lookslike a closure and the closure is thelast argument so we can omit it and justdo the trail enclosure syntax which isis going right into the body of theclosure the braces and real quick toshow you if I command click onto thev-stack jump to definition go to theinit here you can see the alignment hasa default value of Dot Center spacingdefault value of Nils like I saiddefault values are everywhere in Swiftythat's what allows that clean syntax andhere you go does this look familiarWe'll add view Builder that's adifferent topic but you can see the lastargument is the content that closurelooks familiar right it takes in noparameters and it returns of typecontent so back to the v-stack realquick that is why we can get rid of thisand that's why you can write a v-stackwhich is a simple v-stack open curlybrace close curly brace Trail enclosuresyntax all over Swift UI if you've everwritten a network call prior to asyncawait you've dealt with completionhandlers or closures they're the samething let's take a look at this functionsignature for get followers by the waythis goes up to the GitHub API pullsdown a list of followers to display onscreen okay so parameters username pagecompleted though this is the closurehere and it's marked at escaping we'regoing to talk about what that means butto review the closure right our closuretakes in a result type and the resulttype returns a follower or GF error andthen it returns void so it doesn'treturn anything so again like I saidthis could easily be just closedparentheses same exact thing but why isit marked at escaping well the closuresthat we were doing before like when wewere filtering the students those happeninstantly right they get called rightaway they happen right away no big dealon network calls this fires off and itgoes up into the cloud to GitHub API anddepending on your network right it couldbe super slow it could take 10 secondscould take a millisecond maybe you'renot even connected to the internet couldtake forever so what escaping does is itallows the closure to live on past thelifetime of the function that called itspeaking of the function that called itlet's actually go look at that so on thefollower list VC which is that screenyou can see here in the get followersfunction I callnetworkmanager.share.getfollowers andagain as you see here we're using thetrail enclosure syntax because that isthe last argument in the function butwhat happens get followers fires off andthen that function is done however theclosure is still living it outlives thefunction because it is waiting to getthe information back from the networkcall so that is why you mark it atescaping so it can live on past that nowthis is where things get a little trickywith retain cycles and memory leaksbecause most of the time when you do anetwork call you're capturing areference to self because once you getthat list of followers back whether it's10 seconds later 15 seconds later onesecond later you have to update the UIon the phone so our closure still has tohave a reference to whatever called itin this case it's a view controller inUI kit so that's why you got to becareful with Escape enclosures we markedit weak South here so it's a weekly heldreference so it can break that gets intomemory management automatic referencecounting all that stuff that's a wholeanother topic I have a video on thatI'll link to that in the description ifyou want but that's what escaping meansessentially the closure has to live onpast the life of the function thatoriginally called it if this was helpfuland you enjoyed my teaching style checkout my courses at shawnis.teachable.comsee you in the next videowe're talking about filter map reduceI'll show you how to chain them togetherthen we're going to talk about compactmap and Flat map a good way to thinkabout these higher order functions isthey are shorthand Syntax for a basicfor Loop filter map and reduce iterateover an array and spit out their resultsinto a new variable so I'm going to needan array so I'm going to copy and pastethat here as you can see I have an appportfolio of my object here of an indieapp which has a name monthly price andusers and as you can see I've createdfour Indie apps with different namesmonthly prices and number of users andthrown them into an array called appportfolio this is the array that we'regoing to use with the examples on filtermap and reduce let's dive into filterfirst so let's say I want to filterthrough my portfolio of Indie Ops andpull out the free apps so right now fithero with the monthly price of zero isthe only free one so let's say let freeapps equals say app portfolio so this isthe array that I'm going to iterate overdot filter and you can see it takes anenclosure and a simple way to write thisis with a trail enclosure I'll explainthat in a second so we'll do dollar signzero dot monthly price equals equals0.00 a brief explanation of this Trailenclosure is the dollar sign zero it'severy item in the array for example thefirst iteration over the app portfolioarray is the Indie app creator viewdollar sign zero the second iterationequals fit hero dollar sign zero overthe third iteration equals buckets andso forth so it's going to check everyelement's monthly price and if it isequal to zero it's going to spit it outinto this free apps array so when I comedown here in print free apps in theconsole down here you should see justfit hero print out Indie app fit heromonthly price of zero but the way FilterWorks is you just need to pass in aconditional so this has to equate totrue or false as you can see it equalsequals zero or not so let's try anotherone uh users let's say if users isgreater than 5000 and instead of free apps we'll callthis High users right I don't want tofilter all my apps by which ones havehigh users so now when I run it youshould see the array here buckets has7598 users Connect Four has 34 000 usersso again it filtered out all the appswith high users based on thisconditional that I passed into thefilter and as I said in the intro theseare basically shorthand Syntax for forLoops you could do the same thing bydoing this very basic for Loop hereright you have an array called highusers you go for app in-app portfolio soit's going to iterate over all theseapps it's gonna say if app.user isgreater than 5000 go ahead and appendthat app to the high users array up hereand then we'll print out High users if Iprint this againwe should see the same thing buckets andConnect Four same thing we just got soessentially what filter is is a way totake these you know whatever five linesof code we'll delete that and to put itinto a nice one-liner all right nowlet's talk about map so a very commonuse of map is to pull out all of aspecific property so let's say I wantedto pull out just the names of the Indieapps put them in a list and sort themalphabetically so say let app namesequals app portfolio dot map and thenagain you pass in the closure dollarsign zero dot name and then now if Iprint app names I'm going to comment outthe filter print so we don't jumble upthe console here and get confused hereso print app names you see Creator viewfit hero buckets Connect Four so againmap went in just pulled out all thenames I could have pulled out all theprices I could have pulled out all theusers and put that into its own arrayand then now that you have that into itsarray you can also dot sorted right andthen now that will put it inalphabetical order so you can see pulledout all the names of the array andsorted them in alphabetical order let meactually run it it see buckets ConnectFour Creator view all in one simple lineof code so again shorthand Syntax forbasic for Loops now that's the exampleof pulling out a specific property butlet's say I wanted to add a transform tothat property let's say I wanted to doincreased prices so I can do appportfolio map over that array instead ofdollar sign zero dot name I'm gonna dodollars on zero monthly price but I wantto multiply it by 1.5 say I want to pullout all my prices and then also multiplythem by 1.5 so another aspect of map isit'll iterate over that and apply atransform or an operation to eachelement so now instead of print appnames I'm going to print increase priceswe'll run it and you're going to see anarray of all my prices that have beenmultiplied by 1.5 if I were to increasethem okay on to reduce and then we'regoing to start with a super basicexample and then I'll show you a littlemore we can do so super basic let's saylet numbers equal I don't know 3 5 9 1218. so what reduce does it will reduceall these value values into one and themost common way that you use reduce isto you know sum up an array so say Iwanted to get the total sum of all thesenumbers so say let sum equal numbers dotreduce and then reduce has a very trickyautocomplete but again you can pass insimple closure here so we do a startingvalue so I have an INT so I want mystarting value to be zero we're going tocome back to this in a second and anoperator so I'll do plus so the plusmeans I want to sum them all up so nowif I print sum and then let's commentout increase prices so we don't clutterup the console now when I run that youwill see the sum of numbers is 47 1812395 is 47. now again remember theinitial value was Zero let's say Iwanted the initial value to be 100 sonow it's going to add basically an add47 to 100 so I get 147. so you can startwith an initial value and then whateveryou want to do now let's say I wanted tosubtract the total of this array from100. now instead of the plus I do aminus now it's going to be 100 minus 47which as you can see is 53 down there sothe simplest version of reduce we'regoing to do a little more complexversion in a second but the simplestversion of reduce again you start withan initial value and then you add anoperator in here okay now let's do alittle more complex example let's say inmy app portfolio I want to get just thetotal number of users right I want toadd up all the users from each of myIndie apps so here we can do let totalusers equal app portfolio again that'sthis array up here that we've beenworking with DOT reduce and again theinitial value we want to start with zeroand then now we want to pass in anotherclosure to add these two together so wedo dollar sign 0 plus dollar sign oneI'll explain this in a second dot usersand then here we will print total usersso this operation we're passing in hereagain remember I told you dollar signzero is the placeholder for eachiteration through the array dollar signone is the next iteration so you'readding those two together so when you'readding them up you're adding here inCreator view you're adding four threefive six two one seven five six thenyou're adding that to seven five nineeight so that you're going through andadding those together that's what thedollar sign zero and dollar sign onemean so when we print total users we'regonna get that number again let mecomment out some and it's forty seventhousand seven hundred ninety one thatis the total users of all my app andagain we went through and reduced justthe user's property of the app portfoliodown to one variable called total usersnow let me show you how you can chainfilter map and reduce together to dosome complex calculations all on oneline now a little caveat here this canget a little uh messy if you take thistoo far so always consider codereadability versus trying to geteverything on one line that's my caveatbut I just want to show you an exampleof what's possible and I'll let you useyour judgment on what's readable codeand what's not so let's try to figureout a recurring monthly Revenue so eachof these apps has a monthly Price Right11.99 399 and they have a number ofusers so monthly recurring revenue foreach app is you know monthly price timesnumber of users but we want to get thetotal for a whole portfolio not justeach app so we got to do somecombinations here so for chaining we cansay let recurring Revenue equal appportfolio dot map so the first stepwe're going to do is for each item inthe array we're going to multiplymonthly price times dollar sign zero dotusers now we have a little issue herebecause if you look monthly price is adouble users is an INT so we're gonnahave to cast our int to a double so wecan multiply that once we've mapped eachof our apps recurring Revenue againmonthly price times users then we'regoing to tack on or reduce at the end ofthat to total up that array to get ourtotal monthly recurring revenue for ourwhole portfolio that's the process thatwe're going to do here so what it'ssaying here is I need to make this adouble so we can cast the dollar signusers to a double so now if I print justto show you these steps here if I printrecurring Revenue that's coming outtotal users so if I print recurringRevenue we're going to see is an array aof the recurring revenue for each app sothis is Creator views recurring Revenuefit Hero Zero you know buckets wasthirty thousand Now by tacking on ourreduce I can sum up this total to getthe overall portfolio recurring Revenueagain you can just chain them so the maplike I said spits out its result into avariable well that variable can be heldlike temporarily in memory if you tackon another reduce here and then we wantto start with zero and then this is justa simple version right we just add theplus we want to sum that up so whathappens is we map out and get each app'srecurring revenue and then we tack on orreduce at the end and then the result ofthat we will get spit into recurringrevenue and then we're going to printout recurring Revenue so if I run thisthis should spit out one number for myoverall apps recurring Revenue so 150000 for my app portfolio and if youwanted to know what it's going to beafter Apple's cut you can you knowmultiply each one by 0.7 because that'sall you're going to get or if you wantedto account for taxes all that stuff sonow we're taking each app's recurringRevenue so multiplying it by 70 becausethat's you know the developer cut thenwe're reducing that run it again nowwe're 150 Grand a month turned into 105000 a month so like I said you cancombine Maps filters reduces but as youcan also see this code gets to be uhquite unreadable especially to newerdevelopers so like I said be carefulwith this power but just you know theycan be combined and for certainsituations it makes for a super cleanone-liner but it can get out of hand nowlet's talk about compact map and Flatmap these are relatively new additionsto to Swift I shouldn't say I'm gettingold it's like Swift four point somethingbut they weren't around from thebeginning so to put these really simplewhat compact map does is it removes Nilsfrom an array let me show you an examplewe'll say let nil numbers which is anarray of int but they're optional rightmaybe you know in your array you haveone nil 17 nil three seven nil 99 rightfor some reason when you get in Arrayyou can either have new or a number butwhen you want to use this array you justwant to get rid of all those Nils andonly deal with the numbers so to do thatlet non-nil numbers equals nil numbersdot compact map and then you just passin the closure of dollar sign zero andthen now if I print non-nil numbers letme comment out recurring Revenue runthat print the non-nil numbers you cansee I get11737.99 just got rid of the Nils soagain the simple way to remember compactmap is it filters out the Nils now forflat map again a simple way to rememberthis is that if you have an array ofarrays it flattens them into a singlearray let's take a look let array ofarrays and that is going to be up typean array of int so let's say do an arrayof arrays equals and I'll keep theseshorts keep the typing to a minimum soyou see I have an array of arrays righteach array is one two three four fivesix seven eight nine so what flatmapdoes is let's say let single arrayequals array of arrays Dot flat map andagain dollar sign zero so now if I printsingle array let's run that and you cansee it took one two three four five sixseven eight nine and put it all into onearray where it had an array of arrays soyou can imagine if maybe you have abunch of different groups of numbers andyou gather them all together into arrayand you're like I don't care about eacharray I just want to know the totalthere you go flat map is there and let'ssay before you flatten the array youwant it to do something to the arraywell you can do that in the closure hereso you can do a map and then pass inanother closure again we're getting intosome complex examples let's say dollarsign zero times two so I'll tell youwhat this is so within the flat map Ipassed in a map to where each item inthe sub arrays the one two three thefour five six the seven eight nine Iwant to multiply those by two right Iwant to double those and then after Idouble them flatten that into a singlearray so now when I print single arrayinstead of one two three four five sixseven eight nine you're gonna get allthose numbers in a single array butdoubled so run that should get two foursix eight ten yep there you gowhen you need a collection of somethingin Swift You instinctively reach for anarray don't youstop it stop and think would a set workhere because if it does you get someserious benefits like much betterperformance and some really powerfulmethods to help you compare differentsets today you're going to learn thedifferences between sets and arrays andwhen you should use each which is a verycommon interview question by the way aswell as some superpowers of sets thatyou probably didn't know about let'scompare sets versus arrays both arecollections but here are the keydifferences an array can have duplicateitems in it for example if you had alist of first names in a class you couldhave the same first name more than oncean array is always in the same orderthat example of students in a classagain this array you see here that orderis not going to change unless you dosomething to change it of course everytime you access the students array thatorder is going to be the same that's whyarrays are less performant than sets isbecause it keeps that order anytime youwant to look up an item in the array ordo any manipulation on the array it hasto check every item in that array so thetime complexity is O of n whichbasically means as the array goes largerand larger and larger the longer it willtake to do the these lookups ormutations the key differences for a setare that it can have no duplicates solike that student's example where we hadmultiple first names well the set nopeyou can only have one of each item setsare also unordered so anytime I accessthis student set that order is notguaranteed I'm going to get a differentorder every time probably now you may bethinking well having duplicates andhaving everything always be in the sameorder those are really desirableattributes of an array but againremember the trade-off that makes arraysless performant whereas a set when it'sunordered everything is unique andeverything in a set has to conform tohashable and this allows for constanttime lookup so remember the array if youwanted to look something up or or mapover the array the time that takes willbe proportionate to how large the arrayis whereas a set whether the set has 10items in it or 10 000 items in it thatlook up time will be the same will beconstant time so if you're dealing withsmall data you know there's only 10 to20 items in an array it's probablyirrelevant but if you start dealing withreally large arrays this is somethingyou must know these are the keydifferences you need to know between aset and array but sets also have somereally cool methods I'm going to showyou so not only do you get betterperformance with a set you get thesereally powerful methods that help youcompare and pull out data from varioussets let me show you some examples incode here in my playground I have fourdifferent sets as you can see I have onecalled Swifty wide devs Swift devskotlin devs and experienced devs and youcan see some of the names overlap soimagine we have lists of variousdevelopers that have thesequalifications and we want to comparethese sets to pull out you know commonitems or make sure one group is not inanother group now of course theseexamples are real simple there's onlytwo to five names in it but as I'm doingthese examples imagine you had a setwith a thousand names in it first uplet's see where two sets overlap forexample I want to see experience devsand Swift UI devs now you can probablytell just by looking at it right nowthat Sean is the only one that overlapsbut let me show you the code to pullthat out again imagine you had a list ofa thousand names you know you wouldn'tbe able to just look at it so we want tosay let experienced Swift UIhave equal Swift UI devs that's this sethere on line three we can say dot entersection of you can see you pass inanother set experience devs so what thisis going to do is it's going to seewhere the overlap is between anexperienced devs and Swift UI devs andit's going to put it out into its ownset here so if I run this you can seeover on the right the only one is goingto be in there is Sean because that isthe only one that is in Swift UI doesand experience devs so like I said ifyou got a list of a thousand names youwanted to see which names are on bothlists simple little one-liner to pullout all those names again this is thethe power of sets and I have a bunchmore examples to show you of the coolstuff you can do next up is kind of theopposite of intersect is subtract solet's say I wanted a swift developerthat wasn't experienced maybe I wanted ajunior developer specifically so that'swhat I want to check for they want to bein the Swift Dev set but not in theexperience Dev set so that's what we'regoing to check out so we can say letjunior swim shift Dev equal Swift devsdot subtracting experience devs so nowwhen I run it you'll see the only name Ibelieve it's just just James I believeJames is my only Junior developer hereyep there it is James so if you look atthe experience devs you've got Sean AvaOlivia Leo Maya and you see Olivia MayaLeo they're all in there Shawn's inthere the only one that's not anexperienced Dev is James so you see youcan subtract the differences between twovery large lists and just to show youthat let me take out Maya from TheExperience devs real quick and run itagain and then now you'll see James andMaya because Maya is no longer in theexperienced steps another cool one hereis disjoint so we can check to see ifthere there's any overlap between twosets and this returns a Boolean so I'llsay Swift UI devs.is disjoint withkotlin devs if there's not an overlap itwill return true if there is an overlapit will return false you can see theSwift UI devs or Sean and James and thekotlin devs Olivia Elijah Leo Maya Danthere's no overlap so that returns truenow if I change kotlin Dev to Swift devsthere is going to be an overlap so isdisjoint returns false so again if youhad a huge list and you want to makesure there's no overlap between thelists there you go disjoint is for younow Union is a way to combine two setsso for example Swift UI devs and Swiftdevs Ah that's fairly similar let's justcombine that into one list but you knowin a set you can only have one name soif I were combining two arrays I wouldend up with two Sean's and two James inthis combined array but because I wantuniqueness in this set when I do thisUnion it will compare these two sets andcombine them but it will actually turninto the the Swift devs array becauseyou know Sean and James already in therebut that's what it will do it will doSwift UI devs.union with Swift devs andif I go down here and run it you willsee over here Sean James Olivia Maya Leoand again that is the Sean James Oliviamy Leo because we just combined thesetwo we unioned them now let's say wewant to compare the two lists of namesand we want to see who only belongs toone list right let's take Swift as andkotlin devs say we don't want someonewho's like cross-platform developer kindof knows a little bit of both we wantSpecialists we want someone who onlyfocuses on Swift Dev or only focuses onkotlin dev so again we can see ifthey're exclusive only to one of them soI can say Swift devs dot it's asymmetrical difference of kotlin devsnow here this will give me whoops I gotto call to something let Specialistsright I gotta this will spit out anotherset here so run that and you'll see whoare the Specialists Elijah Sean Jamesand Dan and you can compare the Swiftdevs and the kotlin devs and you can seeElijah's only a kotlin Dev Sean is onlya swift Dev so you can see they're theunique ones to the two lists so like Ikeep saying if you had two super largelists of names and you want to do allthese comparisons sets are just alifesaver these little one-liners spitout so much good stuff and I save thesimple ones for last so subset if youknow what the word subset means pre-selfexplained story so it returns a Booleanso you can say Swift UI devs. is subsetof Swift devs this is going to returntrue right because you can see Sean andJames in Swift devs are in Swift UI Devso Swift UI devs is a subset this is aquick again little one-liner check ifyou want to see if something is a subsetthat should return true and then let'schange Swift devs to kotlin devs andthen that should return false becauseSwift UI devs is not a subset of thatsuperset is basically the reverse so yousee Swift devs dot is superset so thatmeans if it's a superset of the subsetof Swift UI devs this should return toTrue again because Swift UI devs beingthe superset contains Swift UI devs runit just to check true again so subsetsuperset checks pretty simple and theninsert delete and find say Swift devsdot insert new member we'll say Joe goesinto Swift devs now remember the orderdoesn't matter on an array you append itto the end you're just inserting it hereand then the order jumbled up but thereyou go you can insert Joe or I can doSwift devs dot remove it's remove Seanand I can do Swift devs dot containsMaya and then here I will print Swiftdevs down here so now when I run thisyou can see I've inserted uh Joe I'veremoved Sean so Swift devs does containMaya is true and now the new Swift devsset that has added Joe and remove Seanthere you go there's Joe and there's nomore Sean so again insert removecontains those are the constant timessuper performant things on a set againif you have a super large data setI'm teaching you about optionals I'mgoing to show you four different ways tounwrap them we're going to talk aboutoptional chaining and then I'm going toshow you some examples of how these areused in a real code base an optional inSwift is something that can either havea value or be nil for example our appcould have a user object where the ageis optional and that's because in ourapp we don't require the user to entertheir age but they can if they want soour code needs to be able to handle bothsituations hey is the age actually goingto have a value or is it going to be niland that's what this question markdenotes a good analogy is to think ofthis age property that has a questionmark as a box that's closed you don'tknow if that box is going to contain anil or you don't know if that box isgoing to actually contain the integervalue of 41. and the way we handle thatin our code is by unwrapping theoptional so here's our user object thatI mentioned before let's create a userreal quick let user equal a user willinitialize that with a name of Sean inthe age is nil so the first way we'regoing to learn to unwrap is with the iflet and I'll tell you about pros andcons of each of these methods as we goso for the if let we can do if let ageequal user dot age and you see user.h isthe optional you see that question markdown there so what this means I'm goingto run through this so when we say iflet age we're creating a new property tostore the value in if user.h has a valuewe're going to store it in this variablecalled age if it's nil it goes into theelse block because age could be you know41 or it could be no so if we have thevalue here we can say print users age isand then we'll print out the H becauseit has a value so it'll go into the elseblock if user.age is nil so we can nowprint user did not enter and age so if Irun this we're going to go into the elseblock because look Shawn's age is nilthis user that we created on line ninethat's the user we're using right hereso if I run it you see user did notenter in age so now if I change on line9 my age to 41 and I run it you're goingto see it's going to go into line 14.user's age is 41. so This Is Usunwrapping the optional like I said wedon't know if it has a value or not sowe have to handle both situations if ithas a value cool and we just did a printstatement but you can imagine therebeing like a whole 50 lines of codedoing whatever you need to do down hereright we just did a simple printstatement and then else if it's nilmaybe you want to show an error dosomething here in the else block now adownside to using IF flat again I'mgoing to talk about the pros and cons isyou have to use age within this scope sowhat it means if you have some logicright like say you want to do like ifage greater than 40 you know dosomething now you can see we're startingto get pretty nested here I'm going todelete this to clean that up uh with ourcode and it can be very hard to read soif let's if they get out of control canlead to this Pyramid of Doom that yousee here so that is one of the downsidesnow of course if you just have a simpleyou know one line of code in here andit's not super nested great go for itbut a way to prevent that Pyramid ofDoom is to use guardlet and that'll bethe next example so regardless you needto use a function because one of thefeatures of guard is an early exit fromthe function so let's create a functioncalled check age and that takes in anINT and we're basically just going to doan age check like if they're over acertain age we can do something in ourapp whatever that is but we don't knowif age has a value so we want to unwrapthat optional so we want to do guard letage equal age else return so I'll sayprint age is nil so guard like I said isgood for the early exit from thefunction because let's say we're doing abunch of code down here like again likeif age is greater than 40 you know dosomething but because this logic relieson there actually being an age webasically say hey if age is nil justreturn don't even do all this code belowI like to refer to this as like the Linein the Sand the guard statement if theguard statement fails it's just going toreturn and none of the code below itwill execute so again it provides thatearly exit which is nice and it avoidsthe Pyramid of Doom because once youhave your age variable here now you canuse that within the entire scope of thefunction whereas if flat remember youhad to use it within this scope righthere just the top part of the ifstatement and then that could get supernested but with the guard statement youcan use it and you know in the wholescope of the function now somethingthat's new in Swift 5.7 I believe isthis boilerplate of garlic age equalsage you've seen you know everywhere ifyou've been coding for a little bit nowyou can just do guard let age if thenaming works out for example up here thenaming doesn't work out I can't just doif let age because we're using user.agethat has a little extra thing but in thevery common boilerplate example we haveto do like if let age equals age orguard let age equals age you no longerhave to have that same name it'll justuse this variable name that you usethere so let's run this function herecheck age and we'll pass in user dot agebecause that is the right now it's 41 soit does have a value let me actually adda print statement and here you are oldlet me comment out these printstatements so we don't get confused inthe console so we'll run it becausebecause there is an age right it shouldgo past the guard statement rightbecause it's it is not nil so it shouldsay you are old right it went in agesgreater than 40. you are old now if I goup to line 9 again here make my age nilit's not going to make it past the guardstatement so run it so basically if ageis nil it's going to go into this agesno as you can see here and then it'sgoing to exit from the function so thiscode never even runs in that situationwhich of course for us is just onesimple little line but I mean therecould be like Network calls there couldbe a whole bunch of code that relies onyou having a property here so you candefinitely save running all that code ifyou don't need to okay moving on to nilcoalescing so no coalescing is great toprovide an easy default value so I cansay let age equal user dot age doublequestion mark or zero so what I'm sayinghere is hey check user.h which rememberup here right now it is no I'm going tocomment out all this if let stuff tostop all the errors and stuff so rightnow my age is nil so if I say let ageequals user.h that is nil so what itdoes it provides a default value it sayshey if this is nil here give it thisdefault value and put that into age soif I were to print age down here and letme get rid of of these print statementsagain so we're not confused run it nowage is zero gives me the default valuebecause it's nil now if I go up andchange Sean's age to 41 and run it nowage is 41 down there now I want to goback to what I said a easy default valueand this is a case where it might notmake sense because providing a defaultvalue of 0 for the age could mess upsome calculations or things you're doingin your app so a place where it may makesense is if you say let name equal welllet me actually go back up to the userLet's Pretend the user.name now isoptional so see how you can makesomething optional real quick just add aquestion mark to the end of it so now ifI do user.name and you can see when Itype in name it shows that it's optionalright here and then if the user's nameis nil then I can provide something likenot given so you can see how if you'reproviding a list of usernames in yourapp showing not given when it's nil is agood default value to have versus maybepassing in 0 for a default age might notwork out so well so again no coalescinga simple default value or works bestokay now let's talk about Forceunwrapping which can be a controversialtopic let me show it to you and thentalk about it for a second so I can saylet age equal user dot age you can seethat is optional and I can just say bangexclamation point what this means is letme comment that out to not be confusinghere what this means is basically it'sit's forcing the unwrap even if it's nilact like it has a value and this willlead to crashes so let me do print ageand let me make age nil up here so ageis nil and I basically said let ageequals user.h if it has a value heysmooth sale and it'll work if it is nilyour app's going to crash so let's runthis and you should see the crash and ifyou've been coding you've probably seenthis a ton fatal error unexpectedlyfound nil while unwrapping an optionalvalue that means you're forcing wrappingsomewhere and it's biting you in the assyou don't want to do that now manydevelopers will say never ever everForce unwrap and to be honest with youif you're a beginner just learning thatis probably will be the safest way to gonever Force unwrap however as you getmore experienced it does become a littlemore nuanced and I believe 95 of thetime never Force unwrap but there arecertain situations which I'll show youin my code base where it's fine to forceand rap at least in my opinion but againthere are many people that will say tonever Force unwrap so you'll hear that alot okay let's comment this out so wecan stop the crashes and let's talkabout optional chaining to finish thisoff so this is when the entire object isoptional so let's say my name in the ageare not optional but the user itself isoptional so let's dive into that here sowe'll say VAR optional user is of typeuser but I put the question mark afterthat so the whole user is optional maybethe user of our app doesn't even have tocreate a profile with a name or an ageso if I want to say let name equaloptionaluser dot name you see it fillsin the question mark right here so thatmeans the whole user itself is optionaland not the name so what will happen isif optional use user is nil the namewill be nil this automatically makesthis property here on line 53 calledname and optional so this is calledoptional chaining because you're reallyafter the name but the whole objectisn't optional and then of course youcan unwrap this in the typical waysright we can do some no coalescingyou're not given that'll work so namewill be not given if optional user isnil you know or you can say if let newname equaloptionaluser dot name say print new nameso this just shows you what chaining isagain once you understand the chain youcan unwrap it however you want using nocoalescing Force unwrapping guard leadall the stuff that we've just did butjust so you know if the object itself isoptional then to get to the propertieson them you're going to see optionalchaining now let me show you examples ofthese in a real code base to give you alittle more context so here's an exampleof if flat where I'm checking the cacheso on this screen the Avatar the channelname and the number of subscribers uptop here I am caching that informationbecause what was happening every time Iwent to the screen it was fetching thedata and the UI would flash like as thenew data fetched so I didn't want thatso I wanted to show the older cachedinformation because the Avatar and thechannel name don't really change and thesubscriber number might change everyonce in a while so basically what I dois I cache the old information and thenshow the new one once the network callhas completed to get the new channelinfo so that is a great thing for if letbecause if I look in my cache and thecache is nil then I just move on and runall the network calls and all that stuffif Ihave an item in the cache then I set mychannel info to that cache Channel infoand update the UI that you see here andthe reason this is good for if LED andI'm not using a guard is because I don'treally care if it's nil or not rightwhether it's nil or not I still want toexecute the rest of the code whereas ifI used a guard I would have to have anearly exit I would have to return out ofthe function and I don't want to returnout of the function so you want to useguard when having something be new makesthe rest of the function irrelevanthere's an example of using guard lit onthis screen where I can drag and dropcalendar items around and when I dropthem I want to make sure the day hasenough room for it because I limit thenumber of events in a day and the dateon those objects is optional so you cansee if the date is nil then I don't evenwant to do all this other code so that'sa great use for the guard lead you seeguardlet date equals date and again Ijust haven't updated my old code inSwift 5.7 I don't need this boilerplateI can just do guardlet date butbasically there is no date just returnfalse and the function don't even runthat stuff so again that's a great useof guard when you want that early exithere's an example of no coalescing againin this UI back to that channel headerwith the Avatar channel name andsubscribers like if the channel info isno it's another example of chaining thenI want to provide a default value ofjust n a for the channel name you cansee I use it down here as well ifChannel info dot abbreviated Subs that'sthe subscriber count in the upper righthand corner if that is nil I'm sorry ifChannel info is no right because I getchannel info from a network call so it'snil until I get actual proper data thenI want to show an N A if that comes backwrong for any reason and then finally anexample of force unwrapping like I said95 of the time you should not do it buthere's an example of where I think it'sokay and to be clear there will bedevelopers that disagree with me and andthat is fine but here this is date mathso this is all Apple system stuff rightyou're getting the year component fortoday's date and then you're calling dotstart here I am Force unwrapping thisdata interval so this is all Applesystem stuff none of this is my codenone of this is anything calculationwise this is all straight up Apple'sstuff I'm sure there may be some crazycrazy Edge case where you know thiscould be no but here's the pros and consof force unwrapping if you do unwrapyour optionals as you saw in theprevious code you add the iflet thegarlic no coalescing you start to get alot of extra code and you can see hereI'm doing a ton of date math in this appwhich is mostly using all of Apple'sbuilt-in system stuff so I would beforcing wrapping it everywhere and makemy code hard to read I'm not sayingthat's a reason to force unwrap what I'msaying is this to me is one of theexamples of a nuanced reason when Forceunwrapping is okaythis video is meant to be your veryfirst step into unit testing so we'regoing to talk about what even is unittesting and why is it important I'mgoing to show you a real example in codeand then we'll talk about should youeven bother writing these unit tests aunit test is where we test a small pieceof code to ensure it gives us theexpected outcome think of a basicfunction that takes in two numbers andadds them together and in my head I liketo think of functions like littlefactories right in this case it takes intwo inputs right two numbers and then itdoes something to them it's adding themtogether and then it spits out a resultin this case it'll spit out the sum ofthe numbers so what a unit test does isit makes sure that that factory isworking as expected and it's doing whatit's supposed to be doing because let'ssay six months down the road a newdeveloper comes into this code base andmaybe they change the plus sign to aminus sign well when we write unit testswe're testing to make sure that thatfunction is adding numbers together soif a developer comes in and changes thatour unit test will catch that becausethat test will fail and we'll dive intoa more detailed example later in thevideo but that's an introduction to whata unit test is and what it does and Iwant to stress the word unit becausethat's the whole point ideally you wantto test the smallest piece of codepossible now the example I just showedyou adding two numbers together youcan't get much simpler than that but youcan imagine if you had a function thatwas 40 50 lines of code long which youshouldn't really have anyway but theidea is if you have a really longinvolved function that is going to be anightmare to test so if you want towrite good testable code you want tobreak it down into the smallest chunkspossible which you should probably bedoing anyway so why is unit testingimportant and what are the benefits wellfirst and foremost it can prevent errorsor regressions what's a regression youask well I think we've all been thereyou ever had a piece of code that wasworking and then later on you came inmaybe you tried to add a littlefunctionality to it or you did a littlerefactoring or maybe you deleted a lineof code you thought wasn't doinganything and then bam everything breakswell that's called a regression becausethings were working now they're notworking so you went backwards and a lotof times regressions are are sneakyright you can change something in onearea of the code but then it breakssomething in another area becauseeverything's interconnected and that'swhy having great unit tests writtenright when you're testing that thefactory is doing what it's supposed tobe doing you can catch those regressionswhen you run the tests and fix themright then and there so as you can seehaving good unit tests gives thedeveloper a level of confidence right alevel of safety that you can maneuver inthe code base change things refactorthings and you know your tests are goingto catch any errors you may introduce sothis allows a developer or developerteam to work a lot faster due to thatsafety and confidence and this is reallyreally important when you're working ona large team of developers now this is agood time to point out that your testsare only as good as you make them what Imean by that is if you don't think ofall the edge cases or all the ways thatyour code can break and write a test tocover that well then your tests aren'treally going to save you and learninghow to write recognize these edge casesand write tests for them does just comewith time experience and practice rightyou're not going to finish watching thisvideo and be a testing expert it's goingto come with time okay let's dive into acode examplehere I am in xcode with a basic tipcalculator app for example the usertypes in you know 500 they can drag theslider to see the tip and then what thebill total would be so I'm not going togo over all the Swift UI code becausewe're really focused on this tipcalculation code because that's whatwe're going to test but if you do wantto follow along I'll scroll back up tothe top pause the video there's the codescroll down a little bit pause the videothere's the rest of the code but againwe're focused on testing so down hereinto our calculation struct which by theway I just put in the same file just forease of use on the video a lot of timesyou'll see your models or anything likethis in a separate file let's walkthrough what's going on with thisfunction you can see I'm calculating thetip I'm taking in the entered amountwhich is a double and then the tip whichis a double so where am I getting theentered amount and the tip so theentered amount here on the on the sliderthe on change is this text field now theentered amount here is a string becauseit is in a text field so I do have toconvert that to a double so essentiallyyou know that will return a nail if theyentered like some emojis or maybemultiple decimal places or if theyentered a string that can't be convertedinto a double this will return nil andI'm just doing I'm just printing invalidentry this is where you would show theman error and then cool once I know Ihave a good amount it's a proper doublethen I am calculating the tip by callingcalculation dot calculate tip of amountwith tip slider and then as you canguess tip slider is coming from theslider here where I pull out you knowzero to 100 you can tip zero percent or100 and then I pass in the tip slideramount there and then I calculate thetip in the total amountso this is the small piece of code theunit that we want to write tests for sothe first thing we need to do is add atest Target to our project now if you'recreating a brand new project fromscratch you'll see this pop-up checkthat little box and you'll get whatwe're about to do you know for free outof the box but if you have an existingproject that you haven't written testsfor we need to add a testing Target andthat's what we're going to do so I'll goto file new Targethere you can type in test you can seethere's UI test or unit testing bundlewhich is a unit testing bundle UI testis a completely separate topic now youcan see you'll get tip calculator teststhat's fine for now all this should begood hit finish and there you go now youhave new tip calculator tests over hereand this gives you basically boilerplateof how tests works or you get set uptear down Test example we're going todive into this later but what I want topoint out is if you just kept it defaulttip calculator test tip calculator isthe name of the app by the way that'slike a test for your whole app and asyou can imagine a big app that file isgoing to get a little unruly so what youwant to probably do is and this getsinto project organization which issubjective but this is just myrecommendation is create new files forevery section of your app now of courseour app is only a tip calculator but youcan imagine if you had 10 screens andyou know a bunch of differentfunctionality you'd want a differentfile for each little section offunctionality just to keep thingsorganized so I'm going to do that rightclick new file say unit test case classhit next we're going to call thiscalculation tests because my struct iscalled calculations I'll show you thatin a second so hit next yep make sureyour target is on the tip calculatortest Target not just the app Target hitcreate cool so you see I basically gotthe same thing the only thing thatchanged was uh the name but again Iwanted to point that out because youknow you're probably gonna have a lot ofthese files testing different areas ofyour code so the reason I call thiscalculation test is back to my contentview is because I have this structcalled calculation now this simpleexample only has one function but youcan imagine if I had something calledcalculation maybe I have 10 functionsthat are calculating a bunch ofdifferent stuff so that is why I namedit that now we're going to delete allthis because we're going to write ourown here now back to the content viewI'm actually going to pull it up side byside we're going to get rid of thepreview so I can see the code here coolso I got my calculation code here andthen my tests over here so the firstthing I like to do is test what we callagain the happy path like if this codeworks properly what should I expectso when you write a test you want tocall it funk and then test it alwaysneeds to start with test and thenwhatever you're testing so I'll saysuccessful tip calculation the basicstructure of a test is you want tobasically set up your variables dosomething and then assert what theresult should be so oftentimes you'llsee given when then you'll also see thiscalled arrange act assert I kind of likethe arrange act assert better you'll seewhy once we do this so the first thingwe need to do is arrange our dataessentially so for calculate tip we wantto give an entered amount and a tipamount and here's where we're setting upthe scenario that we want to test andbecause we're testing you know the thehappy path what's supposed to happenwe're not going to give it anythingcrazy so we'll say let entered amountequal100.00 100 dollars and it will say lettip slider equal 25.0 and I'm adding 0.0so it can be a double and it doesn'tassume it's an inch so like I said we'resetting up our parameter setting up thescenario that we want to test so that'sus arranging or those are the Givens sonow we act or when you know when thishappens or we act so now we want to saylet tip equalcalculation okay so I don't have accessto this calculation struct and this issomething you're probably gonna have todo most of the time so you can do attestable and then import your app nameso tip calculator what this does is thisgives your testing file here access toall the objects in your app so now Iwill have access to this calculationstruct so we're actually going to createthat up here we'll say letcalculation equal we'll initialize uhbrand new calculation struct so let'stip equal calculation dot calculate tipof entered amount with tip slider andI'm going to put this onto two lines sowe can make that neater okay so I amcalculating the tip it's basicallyrunning this function with theseparameters being passed in so that isthe act that is what is happening so nowI want to assert I basically want togive it the answer so we use XC assertand you can see there's a bunch of thesehere a certain nil true false equal notnil so whatever testing situation you'rein whatever you want to test use theproper assert most of the time you'regoing to be using these top ones righttrue false equal maybe nil you'll see ususe no in a second so we're going to useequal so we want to make sure our tipwhich is what we calculated here on line20 equals 25 and that is because youwant to make sure a 25 tip on 100 equals25. so you are manually giving it theanswer because you want to test to makesure that this this Factory thisfunction is doing the the proper thingso now if I click this little Diamond Ican run this testand you can see tests succeeded get thegreen check marks because it is workingas expected now you may be thinking wellif I'm giving it the parameters andgiving it the answer like what's ittesting because let's say on thisentered amount Plus or times tippercentage uh let's say we you know justdid a minus instead of a multiple signyou know another developer came in therechanged it maybe by mistake or maybethought they were doing something wellnow when I run my tests because I've setup these parameters that hey this shouldequal 25 well now it's going to failbecause you know 99.75 is not equal tothe 25 as expected so you can see hownow if someone goes in and changes thecode later the factory still has to dowhat it's supposed to do and that's whatthe test is checking for so let's changethis back to the multiple sign rightentered amount times tip percentage andthen let's run our test again to makesure they're working greencool good to go test succeeded so thatis the happy path that is as expectedbut again your tests are only as good asyou make them you want to cover the edgecases and the various ways this can failso the next thing I want to test is if Iclose out my assistant editor go back tomy content view to get my preview upjust to show you this well we're relyingon the user to enter a bill amount sosure when they enter hey my bill was 100bucks things will work but we want tocover you know when the user doessomething silly right what if the usersays my bill was negative forty fivehundred dollars well a bill is not goingto be negative so you don't want tocalculate a tip on a negative so we wantto account for the case where they entera negative and if you look at ourcalculation we are accounting for thisRight Guard entered amount greater thanzero so if I go back to my tests here sonow I'm going to copy and paste thistest down here and we're going to callthis instead of test successful tipcalculation we're going to call thistest negative entered amount tipcalculation and it's fine if you'retesting names are really long anddescriptive so entered them out let'stest negative 100. so if we look at ourcode what should happen when we pass ina negative well you can see guardentered amount make sure it's greaterthan zero if not we're returning nil andreal quick the reason I'm returning nilis because that's where I'm going toshow the error I'll move this over realquick so we can see if tip comes backnil we're just printing bill amount ortip cannot be negative that's where wewould maybe show like an error to theuser again just a contrived example foreducational purposes but that is why I'mreturning nil so I also wanted to showyou how to assert nil and test this sonow we're testing the negative amountentered so what should happen when wecalculate the tip with negative 100again enter an amount will be less thanzero so we're returning nil so down herein our assert this is the only thingthat changes really is instead of assertequal let's do XC assert nil and what isnil tip should be nil that's what thiscalculate tip returns so we're sayinghey when we get a negative amount itshould be nil so if we run our test thisshould pass again because our code haschange we're writing the test to makesure if it does change we'll catch it sofor example let's say some developercomes in here and I don't know they theydecide to take out this guard statementon line 78 I'll just comment it out wellthe code will still work right becauseif a user just only enters positivenumbers we'll never even see this bugwe'll only see this bug if the userenters a negative number so now when werun our test and by the way you can docommand U to run all of your tests oryou can just hit the little trianglethere but you see this one failedbecause this line of code is gonesomeone thought it wasn't useful but nowwe caught it with our tests and I'mgoing to stop here with the codeexamples but you know we could test anegative tip amount would be verysimilar to that and again you want tothink of all the edge cases all the waythis function can break and then write atest case for it that way if someoneever does come in and change the codelike you just saw the test will catch itand you'll know right away okay let meput this line of code back do a commandU to make sure my tests are all passingcool test or pass we're good to go nowyou may be thinking like okay we did allthis code all these checks for a verysimple small chunk of code and I onlydid two examples there's more to be hadhere you might be thinking like man in ain a real app with tons of code I'mgoing to be writing tons of tests that'sa lot of time effort and work like isthat worth it okay there's no doubt thatwriting good tests takes a lot of worktime and effort there's also no doubtthat there's a lot of benefit from thatwork and effort so the magic question toask yourself is all that work and effortworth it and as always in programming itdepends there's no concrete right answerfor everyone because here's the deallike here's what I want you to thinkabout whether you're an indie developera small startup or a huge companyone of the most if not the most valuableresources you have is your developertime and effort like where you focusyour developers that is so valuable to atechnology company so as you can imagineif you're a small startup and maybe youhave one developer two developers andyou're still trying to figure out theproduct right you're still iteratingit's changing a lot maybe you don't havea lot of users well it makes sense thatthe best use of that developer's time isto focus on the product build somethingusers actually want to get users if thatdeveloper is spending half their timewriting unit tests for features that aregoing to change in a month well you canimagine that startup in that product isprobably not going to move fast enoughto succeed now of course that's anextreme example but let's go to TheOther Extreme say your YouTube you havea billion users and you have a team of ahundred developers well now unit testsare a very important part of yourworkflow and absolutely critical toallowing that team to effectively workon that insanely large code base andmake sure things don't break for yourbillions of users so those are the twoopposite ends of the spectrum on likeshould you write unit tests so where youfall on that Spectrum you know dependson again how many users you have howlarge your team is what's the maturityof your product you know is itconstantly changing still because you'restill trying to figure it out so that'swhy the answer to should you write unittests for your project is it depends andhopefully that example of those twoextremes will help you to navigate thata little bit and it's not all or nothingeither right it's not like either Iwrite zero unit tests or I go for 100code coverage which you probablyshouldn't do anyway right even if youare that Indie Dev or small startup ifyou have a critical piece of codesomething you know is not going tochange yeah go and write unit tests justfor that little bit again you can writeunit tests for whatever chunk of codeyou want so that's why the answer ofshould you write tests how much shouldyou write it's different for every appproject team Etcnever use a Singleton you hear that alot but are they always bad Singletonscome up a lot and iOS Developerinterviews so today you'll learn what isa Singleton the pros and cons of aSingleton and when and where to use themwhat is a Singleton a Singleton is aninstance of a class that can only becreated once and is globally accessiblethroughout your code base let's take alook at an example of a Singleton thatApple itself uses user defaults userdefaults is how we persist data onto thedevice for example if I wanted to showthis onboarding screen only the firsttime my app is ever used I would storeBoolean like is first used into userdefaults so that the screen only showsOnce here's the key question to askyourself before creating a Singleton isit vital that there is only a singleinstance of this class if a secondinstance were to be created would thatmess things up and user defaults is agreat example of this because we wantthat persisted data to be consistentimagine if every time we wanted to fetchfrom user default or write new data touser defaults we created a new instanceof it so now this example of is firstuse well in some user defaults it wouldbe true sometimes it would be falseright you can see I would be veryinconsistent so you see why it's vitalfor there to only be one user defaultsso anything we store in there is goingto be the same when we go to fetch it bythe way that dot standard after userdefaults is the shared instance of userdefaults which makes it a Singleton I'lltell you about that later in the videowhen I break down the anatomy of aSingleton now for the pros and cons of aSingleton the first pro is that therecan only be one it's Unique so ifuniqueness is what you need like we didin that user defaults example there yougo Singletons are good for that thesecond Pro is also a con which we'lltalk about in a little bit but it'sconvenient remember your code base hasGlobal access to that Singleton so inthe example of user defaults no matterwhere I am in my app no matter what fileI can call user defaults.standard ineither fetch or write new data to itdoesn't matter where I am but I want tobe clear if the only reason you chose aSingleton is because it's convenientyou're doing it wrong that is not theway to go the main reason you choose aSingleton is because you need thatuniqueness you need there to only be oneinstance of this class creating a secondone would mess things up the convenienceis just a bonus now for the cons of aSingleton and we'll start off with thatGlobal accessibility that conveniencethat I just talked about because you canimagine if you have a big code base yousee all these files and all of thesefiles can access that shared resourceyou know that Singleton where you canimagine you know this file might beupdating the Singleton which could causea bug in another file so you can see howit can quickly turn into this spiderwebif you know hundreds of files can allaccess and make changes to thisSingleton it can lead to some verytricky bugs so you got to be carefulwith that and because all those filesare accessing the Singleton directlyfrom their file that makes testingpretty tricky because you know the thefunctions in that file may rely on datafrom the Singleton but it's coming froman external Source it's not allself-contained in that function sotesting gets tricky along those linesthe whole set operation of concernsthat's good for programming that getsreal muddy because again all these filesdown here are accessing the sameresource however a common way to fixthis issue is to use dependencyinjection to inject your Singleton intothese files rather than accessing theSingleton directly from the filesdependency injection is a topic foranother video that's coming soon how doyou create a Singleton how do youguarantee that only one of them can becreated well here I have a simpleexample and I kept it simple becausereally there's only two steps the firststep in the class of my Singleton is thestatic let shared equals my Singleton sohere I'm creating a property calledshared and I'm initializing an instanceof my Singleton the class now the secondline is what guarantees the uniquenessthis private init so the initializer isprivate I can't initialize an instanceof my Singleton from outside of thisclass so if I can only initialize theclass my Singleton from within the classthat's exactly what the static letshared equals my Singleton is doing I'minitializing that instance and then nowanytime I want to use my Singleton forexample you see the function down theredo something that's on my Singleton Icall mysingleton.shared do something so how youuse your Singleton is that dot share andthat's exactly what we were doing inuser defaults when we did userdefaults.standard or you may see filemanager file manager.default or URLsession URL session.shared to be clearthat dot shared.default dot standardthat's just the name typically you seedot shared in Singletons but they're alldoing the same thing they just chose toname it default and standard or sharedit's the same thing so our Singleton'sthe worst design pattern in iOS noSingletons are a tool just like a hammera hammer can be used wonderfully to makebeautiful things a hammer can also beused to do some pretty bad thingsSingletons have a bad reputation becausethey are easily abused and a lot ofdevelopers have used them so use themsparingly don't overuse them and you'llbe all rightdependency injection is when you give anobject what it needs rather than thatobject creating or finding it itself andit can be intimidating because the nameis all fancy and there's a few differentvariations on it right initializerinjection property injection methodinjection should you use protocols oreven property wrappers there's a lotgoing on this video teaches you the coreconcept on how to use it and what thebenefits are for our example we're goingto use initializer injection which youmay also hear Constructor injectionbecause why not right dependencyinjection is not intimidating enough asit is let's call the differentvariations multiple names too like Idon't know anyway initializer injectionlet's use the Chipotle app todemonstrate that here's our parent viewright the list of things you can get youknow burritos bowls quesadillas when youtap on an item like a burrito it goes tothe child view which shows a list ofingredients for that burrito so what ourchild view needs is access to ournetwork manager which has our API callsbecause it needs to pull down that listof ingredients and it needs access toour bag which is our order so when we'readding these ingredients we can add itto our order so with dependencyinjection instead of the child viewwhich is the ingredients list creatingits own network manager creating its ownbag object we have our parent view givethe child view the dependencies rightthe network manager and the bag objectand we do that through the initializerlet's take a look at that in code herewe have a very basic version of anetwork manager you can imagine this iswhat holds you know all your API callsagain super simple version for theexample just the function that saysfetch ingredients here's our bag rightthis has an array of items because we'rebuilding that order and then we have afunction called place order again inreal life these two dependencies areobjects the network manager or the bagwill be much more involved much morecomplex but again keeping it simple forthe example this is what it looks likewhen our burrito ingredients view modelhere again this is the child view thelist of ingredients for the burrito itis creating its own network manager it'screating its own bag so this is withoutdependency injection and then you cansee it uses the network manager to fetchthe ingredients and then it uses the bagto place order with dependency injectionwe don't want to create these within thechild do we want the parent view to passthem in and like I said we're going todo that through the initializer soinstead of these properties creating newobjects itself we're going to make themof type network manager get rid of theequal sign put a colon get rid of theparentheses for the initializer put acolon there so now we just haveproperties called network manager thatare of type network manager and bag thatis up type bag and now we're going tobuild an initializer to accept valuesfor those objects passed in so we'll doa knit and you can see we get theautocomplete here network manager takesin a type of network manager and a bagtakes in the type bag and then you seeself.network manager equals the networkmanager in the bag that we passed in sonow anytime we create a burritoingredients view model part of theinitializer it's going to require heygive me a network manager give me a bagthat is US injecting the dependenciesthe dependency injection and then youcan see we're still using it networkmanager fetch ingredients and then bagplace order now here's again a quickpseudo code example I'll paste it inhere here's the meal category view asyou can see this would be the parentview that has the burritos thequesadillas Etc you can see the networkmanager and bag get created in theparent view and then again more kind ofpseudo code here because if you're usingSwift UI maybe this would be anavigation link to present the childingredients view or for your UI kitmaybe you're you know a destination viewcontroller so this is not exact codejust to be clear because it's going tobe different in Swifty wire UI kit theywant to confuse you I just wanted tomake it super simple see you understoodthat however you're navigating to thatchild view again the list of ingredientsfor burrito this is where you wouldcreate the view model for it rightburrito ingredients you model and thenyou pass in the network manager youcreated in the bag you were created atthe parent view so again this is usinjecting the dependencies into thechild view rather than the child viewcreating them it sellsnow you may be noticing your potentialdownside of this initializer injectionnow whether it's property injectioninitializer injection method injectionthey all have their pros and cons anduse cases that's above the scope of thisyou know core concept video butpotential downside of this initializerinjection you see we have twodependencies and the initializer is notthat bad but imagine if you had fourfive six seven dependencies okay nowthis initializer gets a little unruly soagain there's pros and cons to each waynow you may be looking at this childview and say well that's a very minordifference and hey we even added morecode so isn't this a little more complexwhy are we doing this what are thebenefits of dependency injection sothat's the second part of the interviewquestion if you get asked this rightthey're going to ask what is it and thenwhy would you do it so the first reasonyou might do it is to simplify the flowof data so in this example where theparent view the list of meal items rightthe burritos of quesadilla is passing inall the information the child needsright that's one flow very easy whereasbefore where the child view theingredients list it had to create itsown network manager it had to create itsown bag you can see the flow of data isgetting a little more messy and this isa super simple example imagine if youhad a giant app with tons of views turnsinto a giant spider web so to help easethe understanding of how data is Flowingyou know dependency injection makes itvery linear the next two benefits kindof go hand in hand so the first we'lltalk about the separation of concernswith dependency injection we're removingthe responsibility of the child tocreate its own dependency they stillneed to know how to work with thosedependencies right they still need toknow what to do with the network managerbut it's not their responsibility tocreate it that simplifies andcaramelizes things which also makes iteasier to swap out components right ifyou make a completely new networkinglayer you just inject in the newnetworking layer which goes hand in handwith improving tests that's a big thingfor a dependency injection because whenyou try to test the child view insteadof it having to create the networkmanager create the bag and all thatstuff you can just inject in a mockversion of the network manager and thenrun your test so the ability to injecteither a mock Network layer or the realNetwork layer and your child knows howto handle it regardless that allows youto test the child object way easierunderstanding the concept thatdependency injection is giving the childobject its dependencies or what it needsversus the child object creating ititself that is the key and then theother key to answering the interviewquestion is to list off a few of thosebenefits I just told youthe delegate and protocol pattern is aone-to-one communication pattern inSwift it allows one view to communicatewith another view for example The Viewcontroller in our bottom sheet iscommunicating with the main viewcontroller it's communicating that whenthe iPhone button is tapped okay mainview controller go ahead and update yourUI with all the iPhone stuff again it'sa one-to-one communication set up withdelegates and protocols delegates andprotocols can be confusing so I do havea starter project to keep the video asfocused as possible on the topic I willreview it here in 30 seconds it's mostlyUI code you can see the screen I haveset up with an image view a UI label anda button at the bottom so you see hereproduct image view name label productbutton and then most of the code on thescreen this setup UI is just all UI coderight where I'm configuring the imageconfiguring the label configuring thebutton and then setting up constraintsyou can see the image there and then theother piece of code is actuallypresenting the other view controller thebottom sheet right so when I tap chooseproduct we get this bottom sheet andthat's what's happening right here inthis present product selection VC youcan see we're setting up the sheet withthe detents medium that's how it goeshalfway up we're showing the Grabber andthe view controller I'm showing is theproduct selection VC let's go to theproduct selection view controller let'sget the simulator back up again justthree buttons iPhone button iPad buttonMacBook Pro button all this code here itlooks like a lot of code I know it'sjust setting up the UI I'm configuringthree buttons and then setting theconstraints on those three buttons and Ido have actions for those three buttonsright when the iPhone button is tappedright now we're just dismissing ittapping on the MacBook we're justdismissing it that's the overview of thestarter project as you can see I've donenothing with delegates and protocolsit's just purely UI setup but let'sstart talking about those delegates andprotocols as I mentioned in the intro weneed to communicate between these twoview controllers our product selectionview controller and our main viewcontroller right the product selectionone is one with the buttons the mainview controller is in the back so thatis a perfect scenario for a one-to-onecommunication which again delegates andprotocols let me back up and explain thethe concept of delegates because thiswas a light bulb moment for me tounderstand the concept of a delegatebasically delegate is sitting backwaiting to be told when and what to doyou don't call delegate methodsthemselves they get called automaticallywhen they're told what to do that's thebig picture context to keep in mind aswe build this it'll make a lot moresense once we you know code it up okayso if the delegate is sitting aroundwaiting to be told when and what to dosomething has to give it that ordersomething has to give it thoseinstructions and I like to use a boss inan intern analogy so in our case theproduct selection VC this card righthere is going to be telling the mainview controller what to do the productselection view controller the half sheethas all the information it knows whatwas capped it knows the iPhone wastapped it knows the iPad is tapped andit has to pass that message along to themain view controller so it will updateits view here I don't have the code setup so it's not updating but this imagewill change to an iPhone or a Macwhatever so in our case the productselection VC is the boss the main viewcontroller is the intern the main viewcontroller is just sitting around heytell me what to do and I'll do it rightit's just waiting to be told so to setthat up in our product selection VCwhich is going to be the boss in thiscase we need to create a protocol soprotocol and we'll call it productselection delegate and what a protocolis is essentially to keep it supersimple is a list of commands think of itlike the job description right if you'regoing to be my intern here are the tasksthat you need to know how to do so forus we're going to create a functioncalled did select product and we'regoing to pass in the name of the productwhich is a string and also the imagename so we know what image to update andby the way my image names in my assets Ihave these built into the project whichyou can download I have a link to in thedescription to a Dropbox file todownload the project but you can see atthe iPhone iMac super small but thoseare my assets the images are in thereand you can see their names iPad iPhoneMac so I pull in my simulator so you cansee here we need to pass in the name ofthe product so we can update the labelit won't say Apple product line it'llsay iPhone or whatever and then we needto pass the image name so it knows whatimage to show here now in our simpleexample we're only having one Commandright this is like the job descriptionthis is what the enter needs to know howto do you could have did action two Funkdid action three and these are just kindof placeholders for other things thatcould potentially be done on your screenI just want to point out that a protocolcan have many commands right it's a listof instructions a list of commands oursimple example is only going to have onebut again I want to make it clear youcan't have more than one now that wehave our our job description essentiallyright telling the intern what you needto know how to do we need to actuallyhave a quote unquote intern on ourproduct selection screen so for that wehave a variable called delegate and thatis of type product selection delegatethat's what we just created up here andthat is going to be an optional becausewe're gonna have to tell this viewcontroller what the delegate is in ourcase it's going to be the main viewcontroller we'll come back to that in asecond but I want to set up our productselection view controller which in thiscase is our boss and I know I'mrepeating myself but I think repetitionis the key to really learn this stuff solike I said job description in theprotocol here is the actual job positionif you want to use that analogy so nowour boss is set up we have the jobdescription we have the position nowlet's go to our view controller andessentially apply for the job so to dothat we need to conform to the productselection delegate so in order to dothat you do comma product selectiondelegate up here in your classdefinition of the view controller nowxcode's going to yell at me do a commandbeep it says type view controller doesnot conform to protocol selectiondelegate because in order to conform aproduct selection delegate we have tohave these functions in place this didselect product the tasks of the job soback to view controller xcode will fillthese stubs in now this may lookfamiliar if you've ever built a tableView and UI kit you have to implementthe table view delegate methods ifyou've ever done like location managerthere's a location update delegatemethod and again those methods are justsitting back waiting to be told what todo and they fire off automatically andyou'll see that you'll notice I'm notactually going to call did selectproduct in the view controller we'regoing to call it from somewhere else andthen that will fire off automatically soactually don't like the position of thismy variable is up top and then myfunctions so we'll put it down belowview to load so now that I have signedup for the job I need to do somethingwhen I get told what to do this job soin our case we're going to set theproduct image View and pull up thesimulator again right the product imageview is the image of Apple products andthen the product name label is where itsays Apple product line so I want to doproduct name label dot text equals nameand you'll see we're going to pass inthis information and I want to doproduct imageview dot image equals UIimage named image name right we'repassing in this information we haven'tdone that yet you'll see that in asecond but our intern right our internhas signed up for the job I'm conformingto the delegate and I know what to dowhen I'm told hey do your job like Isaid I don't call this did selectproduct from The View controller TheView controller is a delegate it'ssitting back waiting to be told what todo once it gets that order it's going togo ahead and do this job so that's thepremise of the delegate so there's twomore steps we need to do if I go back tomy product selection VC to continue withthis analogy I have my job description Ihave the job opening well back in myview controller I say hey I'm applyingfor the job and I know how to do the jobso let me get hired so to speak so herewhere I'm presenting present productselection VC right I'm creating it I'minitializing a brand new one and thenI'm doing all the modal presentation tomake it a half sheet that's what allthat code is and then I present it wellnow that I have this destination VC Ican set the delegate here so I can saydestinationvc.delegate equals self nowself in this case is the view controllerI am signing up for this job rememberthe destination VC is a productselection VC so if I VC short reviewcontroller if you haven't picked that upyet so now that's this variable righthere that I am setting when I create abrand new product selection VC I'm alsoinitializing it with a delegate that Ihave set here equal to self the viewcontroller is saying hi sign me up Iwant to be your delegate I want to beyour intern so now that this isconnected the main view controller rightthat has our product images is ready todo the job the final piece of the puzzlein our product selection VC or in thiscase our boss is to actually give theorder give the command to do the job nowwhen do we want to do that again pullingup the simulator we want to do that whenthe iPhone button is tapped when theiPad button is tapped when the MacBookPro is tapped we're going to give theorder hey update your UI with the iPadupdate your UI with the Macbook so togive those orders we do that in ouriPhone button tab now this is just myeducational example with the buttonsthis could be anything going on in thisscreen maybe it's on a countdown timermaybe it's when they push a button sixtimes like whatever triggers this rightin our case it's a button tap but thiscan be any trigger where you call thisline of code where you say Okay delegatenow you say did select product andbecause we tapped the iPhone right we'rein the iPhone button tapped the productname I want to pass in is iPhone 14 andthen the image name is just iPhone soyou're telling the delegate okay do yourjob delegate and here's the informationyou need to do your job and if I go backto the view controller this did selectproduct is going to get fired off andwhatever name and image name I pass inon my main view controller I'm going toset my product name label to that nameand the product image view to the imagelet's run this and see it in action andthen we'll set up the other two so I'mchoosing product tap iPhone now mydelegate the main view controller knowshey I'm going to update my label toiPhone 14 and I'm going to update myimage to the iPhone so let's go back anddo the other ones so back to productselection VC I'm going to copy and pastethis command here so copy that put it inthe iPad button tap put it in theMacBook button tab so instead of iPhone14 we're going to say iPad Air and thenthat image is just iPad and then insteadof iPhone 14 for the MacBook we're gonnasay mac book and then the image is Macso now when I run it no matter whatbutton I tap it should updateaccordingly so choose product hit theiPad bam there's the iPad Air chooseproduct hit the MacBook Pro there's theMacBook I guess I could have called thatMacBook Pro on the label that's neitherhere nor there but now you can seethere's two views communicating in aone-to-one patternin today's video we're talking about theUI view controller life cycle methodsyou know viewed load view will appearview did disappear all that stuff I'mgoing to talk about when each one iscalled you know what you should be doingin each one and I'm also going to sharea common example of the differencebetween view to load and view willappear because that's a very commonsituation new developers get themselvesinto they're also going to dabble intothe whole view will layout sub views andview did layout sub views before we diveinto the details of each one let's talkabout when these methods are calledbecause I think that's a source ofconfusion for people just starting outright you may see a method and thenyou're expecting a very explicit methodcall to actually call that method wellthese ones get called automatically bythe system so you're not going to seeyou know view to load get explicitlycalled now when they're called that'swhat we're going to dive into with thespecifics of each one but just knowthey're called automatically now whenyou create your own view controllersyou're subclassing a UI view controllerand when you subclass the UI viewcontroller you're inheriting all theseview lifecycle methods so when you'reusing viewed load in your viewcontroller that's why you're callingsuper.view to load because you want toget all the magic that Apple built onThe View controller and then the codeyou enter in view to load is your owncustom code for this specific subclassof view controller now I just use viewto load as the example but that appliesfor all these lifecycle methods so ifyou're wondering why you're callingsuper in these that's why first up viewdid load now if you did load gets calledwhen the view controller's content viewgets created in memory or loaded fromthe storyboard what's the content viewlet's pull up a storyboard to show youthis real quick so here on the left wehave the view hierarchy of a viewcontroller if you've ever noticed whenyou create a view controller onstoryboard you get this view right hereby default this is the view controller'scontent view so when that view firstgets created in memory view did loadgets called this has nothing to do withwhat's displaying on the screen this iswhen it gets created in memory or loadedfrom the storyboard now because it'sloaded from the storyboard if I go to ascreen here that is why all your Outletswill have a guaranteed value in view didload right that's why your Outlets canbe implicitly unwrapped out optionalsyou may have wondered like why am Iforce unwrapping these Outlets wellagain in view to load your Outlets areguaranteed to have a value that's why wecan do this now let's move on to viewwill appear and then we'll do theexample and the difference between viewto load and view will appear now viewwill appear it gets called just beforethe content view is added to the actualapp's view hierarchy so just before itactually shows up on the screen so letme talk about the word appear real quickbecause being added to the app's viewhierarchy means it's in the viewhierarchy however it may not appear onyour screen and that could be for areason maybe your view is you know myview.hidden but it's still in the viewhierarchy or maybe there's another viewon top of that view so just because it'snot actually showing up on the screenview will appear still happens becauseit's actually in the view hierarchy so Iwanted to clear up that confusion youknow view will appear doesn'tnecessarily mean it's actually showingon the screen again because you couldhave dot is hidden or if you could be ontop of it but it's still there now let'sget into a very common example on whento use view to load and view will appearright this happens all the time in appsso let me pull up the simulator here sohere in this app here so this search VCview to load is called bam this is therenow let me go to the next screen this isthe GitHub followers course by the wayso now uh this is the search VC this isthe follower list VC right now when I goback right view did load is not going toget called but view will appear getscalled because on a navigationcontroller you're just putting a newview controller onto the stack but thissearch VC is still there so thereforeview to load only gets called that firsttime but every time I come back to thescreen view will appear gets called nowhere's how we're using this in this appright so here on the search VC we'reusing it to reset the username textfield to blank so every time we comeback to the screen we want that textfield to be blank if we didn't have thisline of code that salen0400 would alwaysstill be there but now let's movesetting the navigation controller uh tofalse into view did load up here so thiswill prove that view to load only getscalled once right because of the veryfirst time we run it we're going to setthat navigation bar hidden equal to trueright okay look no navbar and then we goto the next screen hit get followers nowthere's a nav bar right we're showingthe nav bar on this screen but when wego back to the the search VC we don'twant to show the nav bar it's just astyling choice but when we go backbecause viewed load only got called thatfirst time now we have a nav bar herewith this search thing right becausethis navigation set navigation barhidden to True is not getting called sothat's why we call this in view willappear right so remember that view didload only gets called that once howeverview will appear is going to get calledevery time the view comes on screen sonow that we have that back in view willappear every time the view comes on thescreen we're making sure we hide thatnavigation barso this is just one common example ofusing you know view will appear overviewdid load a lot of beginning developersget caught up on that they're not surewhy the behavior is happening and theydon't understand that viewed load onlygets called that first time and then ifyou want to change stuff every time ascreen you know shows up you got to doit and view will appear all right let'smove on to view did appear so right wejust did view will appear so thathappens before the view appears so youcan change it and then now you have viewdid appear so this is what gets calledafter the view is in the apps viewhierarchy and could potentially beshowing up on your screen so you want todo stuff here like maybe animationsright because if you start an animationin view to load or view will appear itmay start a little bit too soon rightyou want a visual animation to startonce the screen you know is showing upnow moving on to view will disappearright so this is very similar to viewwill appear except instead of gettingcalled before the view is added to theapps view hierarchy this gets calledjust before it's removed from the appsview hierarchy so you'd want to do stuffin here like committing save changesright uh so let's say you're you're havea form on your app up and before youdismiss the form you want to make sureyou save everything like even if theuser dismisses you know prematurelymaybe you want to save it for somereason so you would do that and viewwill disappear because you want to makesure you do that before the view is goneand then you have view did disappear sothis is something you'd want to do afterthe view has been removed from the viewshierarchy now let's wrap this up bytalking about the less common ones andthat is if you will lay out sub viewsand view did layout sub views now if youwill layout sub-use is called when yourviews bounds change and it's before allthe sub use have been laid out verycommon example of the View's balancechanging is when you rotate fromportrait to landscape on your phoneright you can see the View's boundschanging kind of in real time in theanimation so view will layout sub usegets called after the views boundschange but before it relays out all thesub views that you know are on thescreen and by default like view willlayout sub views and view did layout subviews like there's no defaultimplementation they're just there togive you the programmer access to thispoint in time so you can make changes ifyou need to so if you will layout subviews gives you that chance you knowagain in the example after you rotateyour device before it lays out all thesub views on the screen you have thechance to to do any customization andthen view did layout so I've used againgives you that chance after the sub usehave been laid out if you need to doanything like maybe an animation orsomething like thatnow this is a huge topic that I could dohours and hours of videos on howeverwe're going to keep this video at a highlevel because the entire point of thisvideo is for you to be able to answer aninterview question now during aninterview they're asking you a lot ofquestions so they're not going to expectyou to be an expert and deep dive intothis topic they're just going to want toknow that you have a very basic Generalunderstanding of what's actually goingon with concurrency and threading andwith that being said we're going to talkabout the different thread types themain thread the background thread we'regoing to talk about cues a little bitserial cues concurrent cues and thenwe're also going to talk about how GrandCentral Dispatch kind of ties it alltogether and you can move things aroundfrom different threads and cues allright let's dive in so let's start withthe big picture and what is concurrencybasically concurrency is doing multipletasks at the same time now what allowsus to do this is Apple's multi-coreprocessors here I have picture just anexample of the latest A10 processorwhich is a quad core processor in theiPhone 7. so the more cores you have themore tasks you can do at the same timenow all these tasks are being executedon what are called threads imaginethreads is kind of like this majorhighway each lane in the highway is athread in each car in that lane is atask being executed on that thread nowyou notice here pictured I have a lanehere on the left the express lane that'sreal clean and Speedy and that is calledour main thread and the reason we wantto keep our main thread you know speedyand clean is because that is what our UIis done on so for example if you clog upthis main thread with a very you knowtime intensive task your UI is going tofreeze and your user is going to thinkyour app is locked up so that's why wedo all those time heavy tasks on thebackground threads keep the main threadclear so the UI is still responsive nowall this management of the main threadand all the background threads you canhave because you can have you know a lotof background threads can get reallyhard and tricky however luckily Applehas built something for us called GrandCentral Dispatch and NS operation cueswhich is basically just an API built ontop of this threading to make our livesas developers easier and essentially itjust handles all the heavy lifting ofcreating and managing threads for us asdevelopers we just work with a QR passgive that to Grand Central Dispatch andit just handles all the threadmanagement stuff for us it's pretty niceso by now you're probably asking what'sa cue imagine a queue like people liningup for Star Wars and I don't know whatkind of crazy people do this certainlynot me definitely definitely not me Ilined up for Star Wars and I loved everysecond of it but anyway it's a line sothe first person in the line is thefirst person to go into the movietheater it's called First in first outand that's really all a cue is you justline up tasks and then the task thatwent in first is the first one to getexecuted the second one is the secondone to get executed let's take a look sohere you see all our tasks come in taskone is the first one to go it getsexecuted first then tax two will getexecuted then three and so on and so onthere's your basic cue now there's twotypes of cues we have a Serial cue and aconcurrent queue we're going to talkabout the differences there we kind ofjust saw the serial queue so we'll runthrough it again real quick but theserial cue the tasks come in in orderand then task two doesn't start untiltask one is 100 complete test threedoesn't start until test two is 100complete so everything happens one at atime in ordernow let's take a look at a concurrentcue so in a concurrent queue everythingstill starts in the same order so thetasks are going to start one two threefour however task two does not have towait for Task 1 to complete to start sotherefore things will happen quicker butas you can see it's going to beunpredictable on how things finish soyou can see things start in order onetwo three four however certain tasks arequicker than other taskslet's take a look at that one more timenow imagine task 2 being something likedownloading a high-res image whereastask 4 is you know just downloading sometext so test two certainly starts firsthowever task 4 happens much quicker soyes concurrent stuff you're doing stuffat the same time so it ends quickerhowever the order of completion is veryunpredictable so this leads us into thepros and cons of each when should youuse a Serial cue when should you use aconcurrent cue let's talk about theserial queue first so in a Serial queueit's a predictable execution order soeverything happens in order one twothree four two doesn't even start untilone is done so this prevents raceconditions which we'll talk about in asecond it's very predictablelet's take a lookso again the tasks come in task one getscompleted task two gets completed testthree test four Etc everything's inorder one at a time pretty clean howeveras you can imagine this is slowerbecause everything is happening one at atime task two doesn't even start untiltask one is complete so concurrent cuesare faster because yes they still startan order but everything is kind ofhappening concurrently or at the sametime however this results in anunpredictable order and what I mentionedearlier in race conditions so we'regoing to look at our example again herein a second but I want you to imaginesomething first imagine task 3 and task4 are related and your code has someconditional logic that is relying ontask 3 to be complete before task fourhowever you put it on a concurrent queueso you can't guarantee the order ofcompletion now sometimes task 3 will bedone before task four you can't reallypredict that it all depends on how thesystem is managing the threads and theresources and again that's why it'scalled a race condition because you cannever be certain which task is going tofinish before the other task and againthat's why it has an unpredictable orderagain remember the concurrent queue is amuch faster a way to execute a group oftasks however you just have to not careabout the order they get executed in sofor example let's say you're saving abunch of user preferences you don't carewhat order they get saved in you justwant to be saved as quick as possible sothat's when you would use a concurrentcue and vice versa when the order ofexecution is absolutely imperative thenyou would want to use a Serial queueNow by default every app gets one serialcue which is the main queue and thenfour concurrent cues which are yourbackground cues of various prioritiesnow you can create your own custom cuesbut for the most part this main queuethat you get in the four concurrent cuesin the background that's usually morethan enough for what you needum if you want to create your own customones that's probably more a little moreadvanced but just know that you can dothat so how do we switch back and forthbetween these cues now you've probablyseen this little bit of code before thisdispatchq.maine.async and then you dosome code in there a very common casewhen you would use this is what I haveshown now let's say you downloaded someJson data from the internet you'repopulating a table view once all thatstuff is done downloading you want toreload your table view to show your datawell all that downloading stuff ishappening on a background thread now youwant to shift to a main thread to updateyour UI remember the main thread is kindof like the UI thread so here what thiscode is doing it is dispatching off thebackground thread to the main thread andthen here we are reloading our tableview data this is a very common littlechunk of code and updating your UI onthe main thread is something you'll doall the time as a developer so you'llsee this a lot now you can move stuff toa background queue manually here usingdispatchq.global and the qos stands forquality of service and in this case wewant it to be on the background and thenyou just run whatever code you run runin this block now to be honest with youI have almost never used this code tomanually send something to a backgroundqueue I'm not saying you're never goingto use it but the previous example ofmoving something to the main queue inthe main thread is much more common thanmanually sending something to thebackground thread but I did just want toshow you this so you know it is possiblebut again Far and Away the most commonway you're going to use Grand CentralDispatch is moving stuff from abackground queue to the main queue usingthisdispatchq.maine.async and then doingsomething like reloading your table Viewfirst I'm going to start off with abrief description of what automaticreference counting is and then we'regoing to dive into some code to go oversome examples all right automaticreference counting now this is Apple'sway of handling memory management ofobjects for you now what it's doing isfor each object it's keeping account ofhow many strong references are pointingto that object for example let's say Ihave a person class Sean there's also acamera class a phone class and a Macbookclass now these classes can all have astrong reference pointing back to Seanso automatic reference counting is goingto say that the count is four so if Ieven if I made Sean equal to nil to tryto get rid of Sean from memory automaticreference counting won't allow it Seanwill not be released from memory becausethere's three other objects pointingback to it how do we fix that we need tomake those strong references a weakreference so let's dive into some codeand take a look at a real life exampleokay let's do this first let me walk youthrough the basic setup if you rememberin the introduction I talked about aperson class a camera class a phoneclass and a Macbook class in order tosimplify this coding example we're justgoing to deal with two of the classesthe person and the MacBook but it willstill illustrate the point perfectly solet me walk you through this personclass let you know what's going going onhere a person gets initialized with aname and a Macbook the MacBook isoptional you may not have a Macbookmaybe like Windows I don't know and onlines 13 through 15 we have our dnitcall now this only gets called when theobject is actually released from memoryso this is going to let us know when ourobject is clear from memory and we don'thave a retain cycle or if it doesn't getcalled we do have a retain cycle soyou'll see this in action here in alittle bitand then the MacBook class is verysimilar uh the MacBook has a name theMacBook has an owner which is a personobject up here this class up here on 24through 27 it gets initialized with aname and an owner which is the personobject and again that's optional as welljust like the MacBook here for thepersonand then same thing the D init this getscalled when the MacBook is released frommemory okay let's dive into some code sothe first thing we need to do on theleft here is create our variables solet's go ahead and create Seanand Sean is of type person and it'soptional and then VAR uh we're going tocall our MacBook Matilda I have noreason why just what I want to call itand that's optional as well so we haveour variables created I'm just going tobreak this up into functions thisobviously isn't a real app but I'm goingto break it into functions just toseparate the information and hopefullythat makes it easier to learn so let'sgo ahead and create a function calledcreate objectsand in here we're going to go ahead andinitialize Sean and Matilda so Seanequals personand see our initializer method lets thisautocomplete so the name name is goingto be Sean and the MacBook right now isgoing to be no I haven't gotten to thestore yet to go buy it so I don't have aMacbook yet let's go ahead and createMatilda she's sitting in the storewaiting for me to buy her so she's uptype MacBook and again the initializermethod lets us go ahead and give her thenameand the owner is no haven't bought heryet so there you go so here's what we'vecreated now so just by creating theseobjects as you can see in the image herewe have one strong reference Sean has areference to itself and Matilda has areference to herself you notice MacBookand owner still nil there's noreferences to each other there so allgood starting out let's go ahead andcall this here just so when I run it uhstuff actually happens and just to provethat we only have one reference and wecan dnit each other so let's go aheadand just set Sean equal to niland Matildaequal to no go ahead and run itso as you can see down here in theconsole our dnit methods got called forboth the MacBook and the person so Seanis being de-initialized and Matilda isbeing de-initialized so everything'sworking fine no routine Cycles here okaylet's go back up to create objects andget rid of us uh kneeling out uh Seanand Matildalet's create another function calledassign propertiesand what this is going to do is nowwe're going to create the strongreferences that are going to causetrouble this is going to cause theretain cycle so let's go ahead and fitSean dot MacBook I went to the storeabout my MacBook and it is Matildaand then Matilda now has an ownerand it's me Seanso there you go so as you can see inthis image now we have strong referencesfrom Sean and Matilda pointing back andforth to each other and this is the badthing this is the retain cycle so Seanhas a strong reference to itself strongrefers to Matilda but Matilda isactually pointing back to Sean now toowith a strong reference so back here inassigned properties let's go ahead andmake Sean equal to nilnow let's go and make sure we callassign properties here at the topnow if you remember what I said in theintro because there's an outside objectpointing to Sean in this casematilda.owner is pointing to Sean Seanwill not be removed from memory and thereason is is you only get removed frommemory when the automatic referencecount equals zero so even though I gotrid of Sean's strong reference to itselfthere's still Matilda pointing to Seanso there's still one left so it's notgoing to be de-initialized so let's goahead and run it to prove that okay soit's running uh you're just gonna haveto trust me on that my simulator's onanother screen nothing got printed outso there's no way for you to know buttrust me it's running in our dnit methodover here in lines 13 and 14 of ourperson class is not getting called andagain the reason is because there'sstill a strong reference pointing fromMatilda to Sean so Sean cannot bede-initialized now as I mentioned in theintro the fix for this is to make one ofthe variables weak over here in ourclasses now this depends on how yourdata is structured for this examplelet's say the MacBook is the Lesserimportant object so we're going to goahead and make the MacBook the weakvariableso as you see here on line 22 I made theowner variable which is a person weak sonow if you look at this updated imageyou see Sean still has a strongreference to itself it still has thestrong reference to Matilda but nowthere's no longer a strong referencepointing from Matilda to Sean so nowwhen I make Sean Nill he's able to bereleased from memory because Matilda'snot holding on to him from the outsideanymore so let's go ahead and test thatgo and run it and as you can see in theconsole now our dnit method for Sean isgetting called and Sean is beingde-initialized so now let's double checksomething let's test out let's go aheadand printMatilda dot ownerright Sean's no longer memory Matildashould no longer have an owner let's goand run that so as you can see in theconsole again Sean is beingde-initialized so Sean's gone he's awayfrom memory and now Matilda's owner isno Matilda no longer has an ownerbecause Sean is gone so we've clearedour retain cycle and just for goodmeasure we can go ahead and set Matildaequal to nil as well now now that theSean strong references don't exist goahead and run that just to double checkso as you can see bolsha and Matilda cannow be removed from memory whereasbefore when they have their strongreferences pointed back to each otherneither one of their strong referencecounts would have ever gotten to zero sothey could have never been deallocatedfor memory if you have a lot of thesethroughout your code it really affectsthe performance of your app